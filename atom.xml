<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Harry-积少成多</title>
  
  
  <link href="/Harry.github.io/atom.xml" rel="self"/>
  
  <link href="https://cq-harry.github.io/Harry.github.io/"/>
  <updated>2018-03-16T07:48:19.174Z</updated>
  <id>https://cq-harry.github.io/Harry.github.io/</id>
  
  <author>
    <name>Harry</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>阿里云Redis开发规范</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/16/%E9%98%BF%E9%87%8C%E4%BA%91Redis%E5%BC%80%E5%8F%91%E8%A7%84%E8%8C%83/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/16/阿里云Redis开发规范/</id>
    <published>2018-03-16T04:05:44.000Z</published>
    <updated>2018-03-16T07:48:19.174Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>摘要： 本文介绍了在使用阿里云Redis的开发规范，从键值设计、命令使用、客户端使用、相关工具等方面进行说明，通过本文的介绍可以减少使用Redis过程带来的问题。</p></blockquote><a id="more"></a><h3 id="一、键值设计"><a href="#一、键值设计" class="headerlink" title="一、键值设计"></a>一、键值设计</h3><h4 id="1-key名设计"><a href="#1-key名设计" class="headerlink" title="1. key名设计"></a>1. key名设计</h4><p>(1)【建议】: 可读性和可管理性<br>以业务名(或数据库名)为前缀(防止key冲突)，用冒号分隔，比如业务名:表名:id</p><pre><code>ugc:video:1</code></pre><p>(2)【建议】：简洁性<br>保证语义的前提下，控制key的长度，当key较多时，内存占用也不容忽视，例如：</p><pre><code>user:{uid}:friends:messages:{mid}简化为u:{uid}:fr:m:{mid}。</code></pre><p>(3)【强制】：不要包含特殊字符<br>反例：包含空格、换行、单双引号以及其他转义字符</p><h4 id="2-value设计"><a href="#2-value设计" class="headerlink" title="2. value设计"></a>2. value设计</h4><p>(1)【强制】：拒绝bigkey(防止网卡流量、慢查询)<br>string类型控制在10KB以内，hash、list、set、zset元素个数不要超过5000。</p><p>反例：一个包含200万个元素的list。</p><p>非字符串的bigkey，不要使用del删除，使用hscan、sscan、zscan方式渐进式删除，同时要注意防止bigkey过期时间自动删除问题(例如一个200万的zset设置1小时过期，会触发del操作，造成阻塞，而且该操作不会不出现在慢查询中(latency可查))，查找方法和删除方法</p><p>(2)【推荐】：选择适合的数据类型。<br>例如：实体类型(要合理控制和使用数据结构内存编码优化配置,例如ziplist，但也要注意节省内存和性能之间的平衡)<br>反例：</p><pre><code>set user:1:name tomset user:1:age 19set user:1:favor football</code></pre><p>正例:</p><pre><code>hmset user:1 name tom age 19 favor football</code></pre><h4 id="3-【推荐】：控制key的生命周期，redis不是垃圾桶。"><a href="#3-【推荐】：控制key的生命周期，redis不是垃圾桶。" class="headerlink" title="3.【推荐】：控制key的生命周期，redis不是垃圾桶。"></a>3.【推荐】：控制key的生命周期，redis不是垃圾桶。</h4><p>建议使用expire设置过期时间(条件允许可以打散过期时间，防止集中过期)，不过期的数据重点关注idletime。</p><h3 id="二、命令使用"><a href="#二、命令使用" class="headerlink" title="二、命令使用"></a>二、命令使用</h3><h4 id="1-【推荐】-O-N-命令关注N的数量"><a href="#1-【推荐】-O-N-命令关注N的数量" class="headerlink" title="1.【推荐】 O(N)命令关注N的数量"></a>1.【推荐】 O(N)命令关注N的数量</h4><p>例如hgetall、lrange、smembers、zrange、sinter等并非不能使用，但是需要明确N的值。有遍历的需求可以使用hscan、sscan、zscan代替。</p><h4 id="2-【推荐】：禁用命令"><a href="#2-【推荐】：禁用命令" class="headerlink" title="2.【推荐】：禁用命令"></a>2.【推荐】：禁用命令</h4><p>禁止线上使用keys、flushall、flushdb等，通过redis的rename机制禁掉命令，或者使用scan的方式渐进式处理。</p><h4 id="3-【推荐】合理使用select"><a href="#3-【推荐】合理使用select" class="headerlink" title="3.【推荐】合理使用select"></a>3.【推荐】合理使用select</h4><p>redis的多数据库较弱，使用数字进行区分，很多客户端支持较差，同时多业务用多数据库实际还是单线程处理，会有干扰。</p><h4 id="4-【推荐】使用批量操作提高效率"><a href="#4-【推荐】使用批量操作提高效率" class="headerlink" title="4.【推荐】使用批量操作提高效率"></a>4.【推荐】使用批量操作提高效率</h4><pre><code>原生命令：例如mget、mset。非原生命令：可以使用pipeline提高效率。</code></pre><p>但要注意控制一次批量操作的元素个数(例如500以内，实际也和元素字节数有关)。<br>注意两者不同：</p><pre><code>1. 原生是原子操作，pipeline是非原子操作。2. pipeline可以打包不同的命令，原生做不到3. pipeline需要客户端和服务端同时支持。</code></pre><h4 id="5-【建议】Redis事务功能较弱，不建议过多使用"><a href="#5-【建议】Redis事务功能较弱，不建议过多使用" class="headerlink" title="5.【建议】Redis事务功能较弱，不建议过多使用"></a>5.【建议】Redis事务功能较弱，不建议过多使用</h4><p>Redis的事务功能较弱(不支持回滚)，而且集群版本(自研和官方)要求一次事务操作的key必须在一个slot上(可以使用hashtag功能解决)</p><h4 id="6-【建议】Redis集群版本在使用Lua上有特殊要求："><a href="#6-【建议】Redis集群版本在使用Lua上有特殊要求：" class="headerlink" title="6.【建议】Redis集群版本在使用Lua上有特殊要求："></a>6.【建议】Redis集群版本在使用Lua上有特殊要求：</h4><ul><li>所有key都应该由 KEYS 数组来传递，redis.call/pcall 里面调用的redis命令，key的位置，必须是KEYS array, 否则直接返回error，”-ERR bad lua script for redis cluster, all the keys that the script uses should be passed using the KEYS array”</li><li>所有key，必须在1个slot上，否则直接返回error, “-ERR eval/evalsha command keys must in same slot”</li></ul><h4 id="7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。"><a href="#7-【建议】必要情况下使用monitor命令时，要注意不要长时间使用。" class="headerlink" title="7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。"></a>7.【建议】必要情况下使用monitor命令时，要注意不要长时间使用。</h4><h3 id="三、客户端使用"><a href="#三、客户端使用" class="headerlink" title="三、客户端使用"></a>三、客户端使用</h3><h4 id="1-【推荐】"><a href="#1-【推荐】" class="headerlink" title="1.【推荐】"></a>1.【推荐】</h4><p>避免多个应用使用一个Redis实例<br><br>正例：不相干的业务拆分，公共数据做服务化。</p><h4 id="2-【推荐】"><a href="#2-【推荐】" class="headerlink" title="2.【推荐】"></a>2.【推荐】</h4><p>使用带有连接池的数据库，可以有效控制连接，同时提高效率，标准使用方式：<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//执行命令如下：</span></span><br><span class="line">Jedis jedis = <span class="keyword">null</span>;</span><br><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">    jedis = jedisPool.getResource();</span><br><span class="line">    <span class="comment">//具体的命令</span></span><br><span class="line">    jedis.executeCommand()</span><br><span class="line">&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">    logger.error(<span class="string">"op key &#123;&#125; error: "</span> + e.getMessage(), key, e);</span><br><span class="line">&#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">    <span class="comment">//注意这里不是关闭连接，在JedisPool模式下，Jedis会被归还给资源池。</span></span><br><span class="line">    <span class="keyword">if</span> (jedis != <span class="keyword">null</span>) </span><br><span class="line">        jedis.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>下面是JedisPool优化方法的文章:</p><ul><li><a href="https://yq.aliyun.com/articles/236384?spm=a2c4e.11153959.blogcont531067.13.fdaf45b5wCuHod" target="_blank" rel="noopener">Jedis常见异常汇总</a></li><li><a href="https://yq.aliyun.com/articles/236383?spm=a2c4e.11153959.blogcont531067.14.fdaf45b5wCuHod" target="_blank" rel="noopener">JedisPool资源池优化</a></li></ul><h4 id="3-【建议】"><a href="#3-【建议】" class="headerlink" title="3.【建议】"></a>3.【建议】</h4><p>高并发下建议客户端添加熔断功能(例如netflix hystrix)</p><h4 id="4-【推荐】"><a href="#4-【推荐】" class="headerlink" title="4.【推荐】"></a>4.【推荐】</h4><p>设置合理的密码，如有必要可以使用SSL加密访问（阿里云Redis支持）</p><h4 id="5-【建议】"><a href="#5-【建议】" class="headerlink" title="5.【建议】"></a>5.【建议】</h4><p>根据自身业务类型，选好maxmemory-policy(最大内存淘汰策略)，设置好过期时间。<br>默认策略是volatile-lru，即超过最大内存后，在过期键中使用lru算法进行key的剔除，保证不过期数据不被删除，但是可能会出现OOM问题。<br>其他策略如下：</p><ul><li>allkeys-lru：根据LRU算法删除键，不管数据有没有设置超时属性，直到腾出足够空间为止。</li><li>allkeys-random：随机删除所有键，直到腾出足够空间为止。</li><li>volatile-random:随机删除过期键，直到腾出足够空间为止。</li><li>volatile-ttl：根据键值对象的ttl属性，删除最近将要过期数据。如果没有，回退到noeviction策略。</li><li>noeviction：不会剔除任何数据，拒绝所有写入操作并返回客户端错误信息”(error) OOM command not allowed when used memory”，此时Redis只响应读操作。</li></ul><h3 id="四、相关工具"><a href="#四、相关工具" class="headerlink" title="四、相关工具"></a>四、相关工具</h3><h4 id="1-【推荐】：数据同步"><a href="#1-【推荐】：数据同步" class="headerlink" title="1.【推荐】：数据同步"></a>1.【推荐】：数据同步</h4><p>redis间数据同步可以使用：redis-port</p><h4 id="2-【推荐】：big-key搜索"><a href="#2-【推荐】：big-key搜索" class="headerlink" title="2.【推荐】：big key搜索"></a>2.【推荐】：big key搜索</h4><p><a href="https://yq.aliyun.com/articles/117042?spm=a2c4e.11153959.blogcont531067.15.fdaf45b5wCuHod" target="_blank" rel="noopener">redis大key搜索工具</a></p><h4 id="3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用"><a href="#3-【推荐】：热点key寻找-内部实现使用monitor，所以建议短时间使用" class="headerlink" title="3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)"></a>3.【推荐】：热点key寻找(内部实现使用monitor，所以建议短时间使用)</h4><p><a href="https://github.com/facebookarchive/redis-faina?spm=a2c4e.11153959.blogcont531067.16.fdaf45b5wCuHod" target="_blank" rel="noopener">facebook的redis-faina</a></p><pre><code>阿里云Redis已经在内核层面解决热点key问题，欢迎使用。</code></pre><h3 id="五-附录：删除bigkey"><a href="#五-附录：删除bigkey" class="headerlink" title="五 附录：删除bigkey"></a>五 附录：删除bigkey</h3><pre><code>1. 下面操作可以使用pipeline加速。2. redis 4.0已经支持key的异步删除，欢迎使用。</code></pre><h4 id="1-Hash删除-hscan-hdel"><a href="#1-Hash删除-hscan-hdel" class="headerlink" title="1. Hash删除: hscan + hdel"></a>1. Hash删除: hscan + hdel</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delBigHash</span><span class="params">(String host, <span class="keyword">int</span> port, String password, String bigHashKey)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(host, port);</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = <span class="keyword">new</span> ScanParams().count(<span class="number">100</span>);</span><br><span class="line">    String cursor = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ScanResult&lt;Entry&lt;String, String&gt;&gt; scanResult = jedis.hscan(bigHashKey, cursor, scanParams);</span><br><span class="line">        List&lt;Entry&lt;String, String&gt;&gt; entryList = scanResult.getResult();</span><br><span class="line">        <span class="keyword">if</span> (entryList != <span class="keyword">null</span> &amp;&amp; !entryList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Entry&lt;String, String&gt; entry : entryList) &#123;</span><br><span class="line">                jedis.hdel(bigHashKey, entry.getKey());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="string">"0"</span>.equals(cursor));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除bigkey</span></span><br><span class="line">    jedis.del(bigHashKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="2-List删除-ltrim"><a href="#2-List删除-ltrim" class="headerlink" title="2. List删除: ltrim"></a>2. List删除: ltrim</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delBigList</span><span class="params">(String host, <span class="keyword">int</span> port, String password, String bigListKey)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(host, port);</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">long</span> llen = jedis.llen(bigListKey);</span><br><span class="line">    <span class="keyword">int</span> counter = <span class="number">0</span>;</span><br><span class="line">    <span class="keyword">int</span> left = <span class="number">100</span>;</span><br><span class="line">    <span class="keyword">while</span> (counter &lt; llen) &#123;</span><br><span class="line">        <span class="comment">//每次从左侧截掉100个</span></span><br><span class="line">        jedis.ltrim(bigListKey, left, llen);</span><br><span class="line">        counter += left;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//最终删除key</span></span><br><span class="line">    jedis.del(bigListKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="3-Set删除-sscan-srem"><a href="#3-Set删除-sscan-srem" class="headerlink" title="3. Set删除: sscan + srem"></a>3. Set删除: sscan + srem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delBigSet</span><span class="params">(String host, <span class="keyword">int</span> port, String password, String bigSetKey)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(host, port);</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = <span class="keyword">new</span> ScanParams().count(<span class="number">100</span>);</span><br><span class="line">    String cursor = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ScanResult&lt;String&gt; scanResult = jedis.sscan(bigSetKey, cursor, scanParams);</span><br><span class="line">        List&lt;String&gt; memberList = scanResult.getResult();</span><br><span class="line">        <span class="keyword">if</span> (memberList != <span class="keyword">null</span> &amp;&amp; !memberList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (String member : memberList) &#123;</span><br><span class="line">                jedis.srem(bigSetKey, member);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="string">"0"</span>.equals(cursor));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除bigkey</span></span><br><span class="line">    jedis.del(bigSetKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="4-SortedSet删除-zscan-zrem"><a href="#4-SortedSet删除-zscan-zrem" class="headerlink" title="4. SortedSet删除: zscan + zrem"></a>4. SortedSet删除: zscan + zrem</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">delBigZset</span><span class="params">(String host, <span class="keyword">int</span> port, String password, String bigZsetKey)</span> </span>&#123;</span><br><span class="line">    Jedis jedis = <span class="keyword">new</span> Jedis(host, port);</span><br><span class="line">    <span class="keyword">if</span> (password != <span class="keyword">null</span> &amp;&amp; !<span class="string">""</span>.equals(password)) &#123;</span><br><span class="line">        jedis.auth(password);</span><br><span class="line">    &#125;</span><br><span class="line">    ScanParams scanParams = <span class="keyword">new</span> ScanParams().count(<span class="number">100</span>);</span><br><span class="line">    String cursor = <span class="string">"0"</span>;</span><br><span class="line">    <span class="keyword">do</span> &#123;</span><br><span class="line">        ScanResult&lt;Tuple&gt; scanResult = jedis.zscan(bigZsetKey, cursor, scanParams);</span><br><span class="line">        List&lt;Tuple&gt; tupleList = scanResult.getResult();</span><br><span class="line">        <span class="keyword">if</span> (tupleList != <span class="keyword">null</span> &amp;&amp; !tupleList.isEmpty()) &#123;</span><br><span class="line">            <span class="keyword">for</span> (Tuple tuple : tupleList) &#123;</span><br><span class="line">                jedis.zrem(bigZsetKey, tuple.getElement());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        cursor = scanResult.getStringCursor();</span><br><span class="line">    &#125; <span class="keyword">while</span> (!<span class="string">"0"</span>.equals(cursor));</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//删除bigkey</span></span><br><span class="line">    jedis.del(bigZsetKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;摘要： 本文介绍了在使用阿里云Redis的开发规范，从键值设计、命令使用、客户端使用、相关工具等方面进行说明，通过本文的介绍可以减少使用Redis过程带来的问题。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Redis" scheme="https://cq-harry.github.io/Harry.github.io/categories/Redis/"/>
    
    
      <category term="Redis" scheme="https://cq-harry.github.io/Harry.github.io/tags/Redis/"/>
    
      <category term="阿里云Redis" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E9%98%BF%E9%87%8C%E4%BA%91Redis/"/>
    
      <category term="Redis规范" scheme="https://cq-harry.github.io/Harry.github.io/tags/Redis%E8%A7%84%E8%8C%83/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务实战（二）</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Spring-Cloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Spring-Cloud-微服务实战（二）/</id>
    <published>2018-03-15T15:10:41.000Z</published>
    <updated>2018-03-16T01:14:29.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="服务治理：Spring-Cloud-Eureka"><a href="#服务治理：Spring-Cloud-Eureka" class="headerlink" title="服务治理：Spring Cloud Eureka"></a>服务治理：Spring Cloud Eureka</h1><blockquote><p>该模块主要负责完成微服务架构中的服务治理功能。主要用来实现各个微服务实例的自动化注册于发现。</p><ul><li>服务注册：<br>在服务治理框架中，通常都会构建一个注册中心，每个服务单元想注册中心登记自己提供的服务，将主机与端口号、版本号、通信协议等一些附加信息告知注册中心，注册中心按服务名分类组织服务清单。</li><li>服务发现：由于在服务治理框架下运作，服务间的调用不再通过指定具体的实例地址来实现，而是通过向服务名发起调用实现。所以，服务调用方在调用服务提供方接口的时候，并不知道具体的服务实例位置。因此，调用方需要向服务注册中心咨询服务，并获取所有服务的实例清单，以实现对具体服务实例的访问。</li></ul></blockquote><a id="more"></a><h2 id="搭建服务注册中心"><a href="#搭建服务注册中心" class="headerlink" title="搭建服务注册中心"></a>搭建服务注册中心</h2><blockquote><p>新建Spring Boot项目，pom.xml中引入必要的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-parent<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>1.5.9.RELEASE<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">relativePath</span>/&gt;</span> <span class="comment">&lt;!-- lookup parent from repository --&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">parent</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka-server<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>通过@EnableEurekaClient注解启动一个服务注册中心提供给其他应用进行对话。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springclouddemo2Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line"><span class="keyword">new</span> SpringApplicationBuilder(Application.class).web(<span class="keyword">true</span>).run(args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>application.properties添加配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">eureka.instance.hostname=localhost</span><br><span class="line"># 不向注册中心注册自己</span><br><span class="line">eureka.client.register-with-eureka=false</span><br><span class="line"># 由于注册中心的职责就是维护服务实例，不需要去检索服务</span><br><span class="line">eureka.client.fetch-registry=false</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://$&#123;eureka.instance.hostname&#125;:$&#123;server.port&#125;/eureka/</span><br></pre></td></tr></table></figure></p><p>启动并访问<a href="http://localhost:1111/可以看到Eureka信息面板。" target="_blank" rel="noopener">http://localhost:1111/可以看到Eureka信息面板。</a></p><h2 id="注册服务提供者"><a href="#注册服务提供者" class="headerlink" title="注册服务提供者"></a>注册服务提供者</h2><blockquote><p>新建Spring Boot项目，pom.xml中引入必要的依赖：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><p>新增HelloController<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HelloController</span> </span>&#123;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Logger logger = Logger.getLogger(getClass());</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line"><span class="keyword">private</span> DiscoveryClient discoveryClient;</span><br><span class="line"><span class="meta">@RequestMapping</span>(<span class="string">"/hello"</span>)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">index</span><span class="params">()</span> </span>&#123;</span><br><span class="line">ServiceInstance instance = discoveryClient.getLocalServiceInstance();</span><br><span class="line">logger.info(<span class="string">"/hello,host:"</span> + instance.getHost() + <span class="string">",service_id:"</span> + instance.getServiceId());</span><br><span class="line"><span class="keyword">return</span> <span class="string">"Hello World"</span>;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>在主类中通过加上@EnableEurekaClient注解，激活Eureka中的DiscoveryClient实现。<br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableEurekaClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Springclouddemo2Application</span> </span>&#123;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(Springclouddemo2Application.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>application.properties添加配置：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=hello-service</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/</span><br></pre></td></tr></table></figure></p><p><strong>分别启动1.2.项目，在2项目的控制台com.netflix.discovery.DiscouveryClient对象打印了该服务的注册信息，表示注册成功。而此时在1项目控制台输出：名为hello-service的服务被注册成功了。</strong></p><h2 id="高可用注册中心"><a href="#高可用注册中心" class="headerlink" title="高可用注册中心"></a>高可用注册中心</h2><blockquote><p>Eureka Server的高可用实际上就是将自己作为服务项其他服务注册中心注册自己，这样就可以形成一组相互注册的服务注册中心，以实现服务清单的互相同步，达到高可用的效果。在项目1基础上进行扩展，构建一个双节点的服务注册中心集群。<br><strong>·创建application-peer1.properties，作为peer1服务中心的配置，并将serviceUrl指向peer2：</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=1111</span><br><span class="line">eureka.instance.hostname=peer1</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://peer2:1112/eureka/</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>·创建application-peer2.properties，作为peer2服务中心的配置，并将serviceUrl指向peer1：</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=eureka-server</span><br><span class="line">server.port=1112</span><br><span class="line">eureka.instance.hostname=peer2</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://peer1:1111/eureka/</span><br></pre></td></tr></table></figure></p><p><strong>·在hosts文件中添加对peer1和peer2的转换，让上面配置的host形式的serviceUrl能在本地正确访问到；</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">127.0.0.1peer1</span><br><span class="line">127.0.0.1peer2</span><br></pre></td></tr></table></figure></p><p><strong>·通过spring.profiles.active属性来分别启动peer1和peer2：</strong><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar eureka-server-1.0.0.jar --spring.profiles.active=peer1</span><br><span class="line">java -jar eureka-server-1.0.0.jar --spring.profiles.active=peer2</span><br></pre></td></tr></table></figure></p><p>此时访问peer1的注册中心<a href="http://localhost:1111/" target="_blank" rel="noopener">http://localhost:1111/</a> ，可以看到registered-replicas中已经有peer2节点的eureka-server了。同样的，访问peer2的注册中心<a href="http://localhost:1112/" target="_blank" rel="noopener">http://localhost:1112/</a> ，也能看到registered-replicas中已经有peer1节点。<br><strong>·在设置了多节点的服务注册中心之后，服务提供方还需要配置才能将服务注册到Eureka Server集群中。修改项目2的application.properties配置文件：</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=hello-service</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://peer1:1111/eureka/,http://peer2:1112/eureka/</span><br></pre></td></tr></table></figure></p><p>启动该项目，访问<a href="http://localhost:1111/" target="_blank" rel="noopener">http://localhost:1111/</a> 和 <a href="http://localhost:1112/" target="_blank" rel="noopener">http://localhost:1112/</a> ,可以看到hello-server服务同时注册到peer1和peer2上。若此时断开peer1，由于同时也像peer2注册，因此在peer2上的服务依然能访问到hello-server，从而实现了服务注册中心的高可用。</p><h2 id="服务发现与消费"><a href="#服务发现与消费" class="headerlink" title="服务发现与消费"></a>服务发现与消费</h2><blockquote><p>前3点已经有了服务注册中心和服务提供者，现在构建一个服务消费者，主要完成两个目标，发现服务以及消费服务。服务发现的任务由Eureka的客户端完成，服务消费的任务由Ribbon完成。<br><strong>·启动项目2：hello-service服务，实验Ribbon的客户端负载均衡功能，使用java -jar命令行的方式来启动两个不同端口的hello-service，如下：</strong><br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">java -jar hello-service-0.0.1-SNAPSHOT.jar --server.port=8081</span><br><span class="line">java -jar hello-service-0.0.1-SNAPSHOT.jar --server.port=8082</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>·启动成功后，从Eureka信息面板可以看到名为HELLO-SERVICE的服务中出现了两个实例单元，分别是通过8081端口和8082端口的服务。</strong><br><strong>·创建Spring Boot的基础工程来实现服务消费者（ribbon-consumer），在pom.xml引入如下依赖：</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-web<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-test<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>test<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-eureka<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-starter-ribbon<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencyManagement</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.cloud<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-cloud-dependencies<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">version</span>&gt;</span>Dalston.SR3<span class="tag">&lt;/<span class="name">version</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">type</span>&gt;</span>pom<span class="tag">&lt;/<span class="name">type</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">scope</span>&gt;</span>import<span class="tag">&lt;/<span class="name">scope</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencies</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependencyManagement</span>&gt;</span></span><br></pre></td></tr></table></figure></p><p><strong>·在应用启动主类通过@EnableDiscoveryClient注解让该应用注册为Eureka客户端应用，以获得服务发现的能力。同时在该主类中创建RestTemplate的Spring Bean实例，并通过@LoadBalanced注解开启客户端负载均衡。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@EnableDiscoveryClient</span></span><br><span class="line"><span class="meta">@SpringBootApplication</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RibbonConsumerApplication</span> </span>&#123;</span><br><span class="line"><span class="meta">@Bean</span></span><br><span class="line"><span class="meta">@LoadBalanced</span></span><br><span class="line"><span class="function">RestTemplate <span class="title">restTemplate</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> <span class="keyword">new</span> RestTemplate();</span><br><span class="line">&#125;</span><br><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">SpringApplication.run(RibbonConsumerApplication.class, args);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>·创建ConsumerController类并实现/ribbon-consumer接口。在该接口中，通过在上面创建的RestTemplate来实现对HELLO-SERVICE服务提供的/hello接口进行调用。</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@RestController</span></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ConsumerController</span> </span>&#123;</span><br><span class="line"><span class="meta">@Autowired</span></span><br><span class="line">RestTemplate restTemplate;</span><br><span class="line"><span class="meta">@RequestMapping</span>(value = <span class="string">"/ribbon-consumer"</span>, method = RequestMethod.GET)</span><br><span class="line"><span class="function"><span class="keyword">public</span> String <span class="title">helloConsumer</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">return</span> restTemplate.getForEntity(<span class="string">"http://HELLO-SERVICE/hello"</span>, String.class).getBody();</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>·在application.properties中配置Eureka服务注册中心的位置，需要与之前的HELLO-SERVER一样，不然是发现不了该服务的，同时设置该消费者的端口为9000，否则会冲突。</strong><br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">spring.application.name=ribbon-consumer</span><br><span class="line">server.port=9000</span><br><span class="line">eureka.client.serviceUrl.defaultZone=http://localhost:1111/eureka/</span><br></pre></td></tr></table></figure></p><p><strong>·启动ribbon-consumer应用后，在Eureka信息面板中看到除了HELLO-SERVER之外，还有RIBBON-CONSUMER服务。</strong><br><strong>·访问http：//localhost:9000/ribbon-consumer 发起GET请求，返回“Hello World”。在ribbon-consumer控制台看到Ribbon输出了当前客户端维护的HELLO-SERVICE的服务列表情况。</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;服务治理：Spring-Cloud-Eureka&quot;&gt;&lt;a href=&quot;#服务治理：Spring-Cloud-Eureka&quot; class=&quot;headerlink&quot; title=&quot;服务治理：Spring Cloud Eureka&quot;&gt;&lt;/a&gt;服务治理：Spring Cloud Eureka&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;该模块主要负责完成微服务架构中的服务治理功能。主要用来实现各个微服务实例的自动化注册于发现。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务注册：&lt;br&gt;在服务治理框架中，通常都会构建一个注册中心，每个服务单元想注册中心登记自己提供的服务，将主机与端口号、版本号、通信协议等一些附加信息告知注册中心，注册中心按服务名分类组织服务清单。&lt;/li&gt;
&lt;li&gt;服务发现：由于在服务治理框架下运作，服务间的调用不再通过指定具体的实例地址来实现，而是通过向服务名发起调用实现。所以，服务调用方在调用服务提供方接口的时候，并不知道具体的服务实例位置。因此，调用方需要向服务注册中心咨询服务，并获取所有服务的实例清单，以实现对具体服务实例的访问。&lt;/li&gt;
&lt;/ul&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://cq-harry.github.io/Harry.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="https://cq-harry.github.io/Harry.github.io/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="Eureka" scheme="https://cq-harry.github.io/Harry.github.io/tags/Eureka/"/>
    
  </entry>
  
  <entry>
    <title>Spring Cloud 微服务实战（一）</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Spring-Cloud-%E5%BE%AE%E6%9C%8D%E5%8A%A1%E5%AE%9E%E6%88%98%EF%BC%88%E4%B8%80%EF%BC%89/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Spring-Cloud-微服务实战（一）/</id>
    <published>2018-03-15T15:07:28.000Z</published>
    <updated>2018-03-16T01:14:29.970Z</updated>
    
    <content type="html"><![CDATA[<h1 id="SpringBoot-actuator"><a href="#SpringBoot-actuator" class="headerlink" title="SpringBoot-actuator"></a>SpringBoot-actuator</h1><blockquote><p>该模块能够自动为Spring Boot 构建的应用提供一系列用于监控的端点。同时，Spring Cloud 在实现各个微服务组件的时候，进一步为该模块做了不少扩展，比如，为原生端点增加了更多的指标和度量信息。</p></blockquote><a id="more"></a><h2 id="引入"><a href="#引入" class="headerlink" title="引入"></a>引入</h2><blockquote><p>在pom.xml的dependencies节点中新增spring-boot-starter-actuator的依赖即可：<br><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">dependency</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">groupId</span>&gt;</span>org.springframework.boot<span class="tag">&lt;/<span class="name">groupId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">artifactId</span>&gt;</span>spring-boot-starter-actuator<span class="tag">&lt;/<span class="name">artifactId</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">dependency</span>&gt;</span></span><br></pre></td></tr></table></figure></p></blockquote><h2 id="application-properties添加配置参数"><a href="#application-properties添加配置参数" class="headerlink" title="application.properties添加配置参数"></a>application.properties添加配置参数</h2><blockquote><p>访问/beans 等敏感的信息时候报错401<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">management.security.enabled=false</span><br></pre></td></tr></table></figure></p></blockquote><h2 id="端点解析"><a href="#端点解析" class="headerlink" title="端点解析"></a>端点解析</h2><blockquote><p>分为3大类：应用配置类（autoconfig、beans、configprops、env、mappings、info）、度量指标类（metrics、health、dump、trace）、操作控制类（shutdown）</p></blockquote><table><thead><tr><th style="text-align:left">ID</th><th style="text-align:left">描述</th><th style="text-align:left">敏感</th></tr></thead><tbody><tr><td style="text-align:left">autoconfig</td><td style="text-align:left">获取应用的自动化配置报告，其中包括所有自动化配置的候选项。同事还列出了每个候选项是否满足自动化配置的各个先决条件。所以，该端点可以帮助我们方便地找到一些自动化配置为什么没有生效的具体原因。该报告内容将自动化配置内容分为两部分：positiveMatches中返回的是条件匹配成功的自动化配置、negativeMatches中返回的是条件匹配不成功的自动化配置</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">beans</td><td style="text-align:left">获取应用上下文中创建的所有 Bean，每个 Bean 中包含：bean（Bean的名称）、scope（Bean的作用域）、type（Bean的Java类型）、resource（class文件的具体路径）、dependencies（依赖的Bean名称）</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">configprops</td><td style="text-align:left">获取应用中配置的属性信息报告（关闭该端点，使用endpoints.configprops.enabled=false来完成设置）</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">env</td><td style="text-align:left">获取应用所有可用的环境属性报告。包括环境变量、JVM属性、应用的配置属性、命令行中参数。为了配置属性的安全，对于一些类似密码等敏感信息，该端点都会进行隐私保护，但是需要让属性名中包含password、secret、key这些关键字，这样该端点在返回它们的时候会使用*来替代实际的属性值。</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">mappings</td><td style="text-align:left">返回所有Spring MVC的控制器映射关系报告。其中bean属性标识了该映射关系的请求处理器，method属性标识了该映射关系的具体处理类和处理函数。</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">info</td><td style="text-align:left">返回一些应用自定义的信息。默认该端点只会返回一个空的JSON内容。可以在application.properties配置文件通过info前缀来设置一些属性。</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">metrics</td><td style="text-align:left">返回当前应用的各类重要度量指标，比如内存信息、线程信息、垃圾回收信息等。还可以通过/metrics/{name}接口来更细粒度地获取度量信息。</td><td style="text-align:left">false</td></tr><tr><td style="text-align:left">health</td><td style="text-align:left">获取应用的各类健康指标信息。</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">dump</td><td style="text-align:left">用来暴露程序运行中的线程信息。</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">trace</td><td style="text-align:left">返回基本的HTTP跟踪信息。默认跟踪信息的存储采用org.springframework.boot.actuate.trace.InMemoryTraceRepository实现的内存方式，始终保留最近的100条请求记录。</td><td style="text-align:left">true</td></tr><tr><td style="text-align:left">shutdown</td><td style="text-align:left">实现关闭该应用的远程操作。通过配置来开启：endpoints.shutdown.enabled=true</td><td style="text-align:left">true</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;SpringBoot-actuator&quot;&gt;&lt;a href=&quot;#SpringBoot-actuator&quot; class=&quot;headerlink&quot; title=&quot;SpringBoot-actuator&quot;&gt;&lt;/a&gt;SpringBoot-actuator&lt;/h1&gt;&lt;blockquote&gt;
&lt;p&gt;该模块能够自动为Spring Boot 构建的应用提供一系列用于监控的端点。同时，Spring Cloud 在实现各个微服务组件的时候，进一步为该模块做了不少扩展，比如，为原生端点增加了更多的指标和度量信息。&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Spring Cloud" scheme="https://cq-harry.github.io/Harry.github.io/categories/Spring-Cloud/"/>
    
    
      <category term="Spring Cloud" scheme="https://cq-harry.github.io/Harry.github.io/tags/Spring-Cloud/"/>
    
      <category term="微服务" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
      <category term="actuator" scheme="https://cq-harry.github.io/Harry.github.io/tags/actuator/"/>
    
  </entry>
  
  <entry>
    <title>Java排序算法整理</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Java%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95%E6%95%B4%E7%90%86/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Java排序算法整理/</id>
    <published>2018-03-15T15:05:14.000Z</published>
    <updated>2018-03-16T01:14:29.968Z</updated>
    
    <content type="html"><![CDATA[<h4 id="冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。"><a href="#冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。" class="headerlink" title="冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。"></a>冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。</h4><a id="more"></a><blockquote><p>该算法的核心思想是扫描数据清单。寻找出现乱序的两个相邻的项目，当找到这两个项目后，交换项目的位置然后继续扫描。重复上面的操作直到所有的项目都按照顺序排好。<br><strong>举个栗子：</strong><br><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">bubbleSort</span><span class="params">()</span> </span>&#123;</span><br><span class="line"><span class="keyword">int</span> a[] = &#123; <span class="number">3</span>, <span class="number">6</span>, <span class="number">4</span>, <span class="number">2</span>, <span class="number">11</span>, <span class="number">10</span>, <span class="number">5</span> &#125;;</span><br><span class="line"><span class="keyword">int</span> temp = <span class="number">0</span>;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length - <span class="number">1</span>; i++) &#123;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> j = <span class="number">0</span>; j &lt; a.length - <span class="number">1</span> - i; j++) &#123;</span><br><span class="line"><span class="keyword">if</span> (a[j] &gt; a[j + <span class="number">1</span>]) &#123;</span><br><span class="line">temp = a[j];</span><br><span class="line">a[j] = a[j + <span class="number">1</span>];</span><br><span class="line">a[j + <span class="number">1</span>] = temp;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">for</span> (<span class="keyword">int</span> i = <span class="number">0</span>; i &lt; a.length; i++) &#123;</span><br><span class="line">System.out.println(a[i]);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p></blockquote><p><strong>未完待续</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。&quot;&gt;&lt;a href=&quot;#冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。&quot; class=&quot;headerlink&quot; title=&quot;冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。&quot;&gt;&lt;/a&gt;冒泡排序法：专门针对已部分排序的数据进行排序。如果在你的数据清单中只有一两个数据是乱序的，用这种算法就是最快的排序算法。如果你的数据清单中的数据是随机排列的，那么这种方法就有可能是最慢的算法。&lt;/h4&gt;
    
    </summary>
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/tags/Java/"/>
    
      <category term="排序算法" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E6%8E%92%E5%BA%8F%E7%AE%97%E6%B3%95/"/>
    
  </entry>
  
  <entry>
    <title>经典Java面试题整理</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/%E7%BB%8F%E5%85%B8Java%E9%9D%A2%E8%AF%95%E9%A2%98%E6%95%B4%E7%90%86/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/经典Java面试题整理/</id>
    <published>2018-03-15T15:02:38.000Z</published>
    <updated>2018-03-16T01:14:29.973Z</updated>
    
    <content type="html"><![CDATA[<h4 id="面向对象编程（OOP）"><a href="#面向对象编程（OOP）" class="headerlink" title="面向对象编程（OOP）"></a>面向对象编程（OOP）</h4><blockquote><p>Java是一个支持并发、基于类和面向对象的计算机编程语言。下面列出了面向对象软件开发的优点：</p><ol><li>代码开发模块化，更易维护和修改。</li><li>代码复用。</li><li>增强代码的可靠性和灵活性。</li><li>增加代码的可理解性。</li><li>面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象</li></ol></blockquote><a id="more"></a><h4 id="封装"><a href="#封装" class="headerlink" title="封装"></a>封装</h4><blockquote><p>封装给对象提供了隐藏内部特性和行为的能力。对象提供一些能被其他对象访问的方法来改变它内部的数据。在Java当中，有3种修饰符：public，private和protected。每一种修饰符给其他的位于同一个包或者不同包下面对象赋予了不同的访问权限。下面列出了使用封装的一些好处:</p><ol><li>通过隐藏对象的属性来保护对象内部的状态。</li><li>提高了代码的可用性和可维护性，因为对象的行为可以被单独的改变或者是扩展。</li><li>禁止对象之间的不良交互提高模块化。</li></ol></blockquote><h4 id="多态"><a href="#多态" class="headerlink" title="多态"></a>多态</h4><blockquote><p>多态是编程语言给不同的底层数据类型做相同的接口展示的一种能力。一个多态类型上的操作可以应用到其他类型的值上面。</p></blockquote><h4 id="抽象"><a href="#抽象" class="headerlink" title="抽象"></a>抽象</h4><blockquote><p>抽象是把想法从具体的实例中分离出来的步骤，因此，要根据他们的功能而不是实现细节来创建类。Java支持创建只暴漏接口而不包含方法实现的抽象的类。这种抽象技术的主要目的是把类的行为和实现细节分离开。</p></blockquote><h4 id="抽象和封装的不同点"><a href="#抽象和封装的不同点" class="headerlink" title="抽象和封装的不同点"></a>抽象和封装的不同点</h4><blockquote><p>抽象和封装是互补的概念。一方面，抽象关注对象的行为。另一方面，封装关注对象行为的细节。一般是通过隐藏对象内部状态信息做到封装，因此，封装可以看成是用来提供抽象的一种策略。</p></blockquote><h4 id="什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"><a href="#什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？" class="headerlink" title="什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？"></a>什么是Java虚拟机？为什么Java被称作是“平台无关的编程语言”？</h4><blockquote><p>Java虚拟机是一个可以执行Java字节码的虚拟机进程。Java源文件被编译成能被Java虚拟机执行的字节码文件。<br>Java被设计成允许应用程序可以运行在任意的平台，而不需要程序员为每一个平台单独重写或者是重新编译。Java虚拟机让这个变为可能，因为它知道底层硬件平台的指令长度和其他特性。</p></blockquote><h4 id="JDK和JRE的区别是什么？"><a href="#JDK和JRE的区别是什么？" class="headerlink" title="JDK和JRE的区别是什么？"></a>JDK和JRE的区别是什么？</h4><blockquote><p>Java运行时环境(JRE)是将要执行Java程序的Java虚拟机。它同时也包含了执行applet需要的浏览器插件。<br>Java开发工具包(JDK)是完整的Java软件开发包，包含了JRE，编译器和其他的工具(比如：JavaDoc，Java调试器)，可以让开发者开发、编译、执行Java应用程序。</p></blockquote><h4 id="”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？"><a href="#”static”关键字是什么意思？Java中是否可以覆盖-override-一个private或者是static的方法？" class="headerlink" title="”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？"></a>”static”关键字是什么意思？Java中是否可以覆盖(override)一个private或者是static的方法？</h4><blockquote><p>“static”关键字表明一个成员变量或者是成员方法可以在没有所属的类的实例变量的情况下被访问。<br>Java中static方法不能被覆盖，因为方法覆盖是基于运行时动态绑定的，而static方法是编译时静态绑定的。static方法跟类的任何实例都不相关，所以概念上不适用。</p></blockquote><h4 id="是否可以在static环境中访问非static变量？"><a href="#是否可以在static环境中访问非static变量？" class="headerlink" title="是否可以在static环境中访问非static变量？"></a>是否可以在static环境中访问非static变量？</h4><blockquote><p>static变量在Java中是属于类的，它在所有的实例中的值是一样的。当类被Java虚拟机载入的时候，会对static变量进行初始化。如果你的代码尝试不用实例来访问非static的变量，编译器会报错，因为这些变量还没有被创建出来，还没有跟任何实例关联上。</p></blockquote><h4 id="Java支持的数据类型有哪些？什么是自动拆装箱？"><a href="#Java支持的数据类型有哪些？什么是自动拆装箱？" class="headerlink" title="Java支持的数据类型有哪些？什么是自动拆装箱？"></a>Java支持的数据类型有哪些？什么是自动拆装箱？</h4><blockquote><p>Java语言支持的8中基本数据类型是：4种整型，2种浮点，1种字符，1种布尔</p><ol><li>byte占用8个字节</li><li>short占用16个字节</li><li>int占用32个字节</li><li>long占用64个字节</li><li>float占用32个字节</li><li>double占用64个字节</li><li>char占用16个字节</li><li>boolean占用1个字节</li></ol></blockquote><blockquote><p>自动装箱是Java编译器在基本数据类型和对应的对象包装类型之间做的一个转化。比如：把int转化成Integer，double转化成double，等等。反之就是自动拆箱。</p></blockquote><h4 id="Java中的方法覆盖-Overriding-和方法重载-Overloading-是什么意思？"><a href="#Java中的方法覆盖-Overriding-和方法重载-Overloading-是什么意思？" class="headerlink" title="Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？"></a>Java中的方法覆盖(Overriding)和方法重载(Overloading)是什么意思？</h4><blockquote><p>Java中的方法重载发生在同一个类里面两个或者是多个方法的方法名相同但是参数不同的情况。与此相对，方法覆盖是说子类重新定义了父类的方法。方法覆盖必须有相同的方法名，参数列表和返回类型。覆盖者可能不会限制它所覆盖的方法的访问。</p></blockquote><h4 id="Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？"><a href="#Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？" class="headerlink" title="Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？"></a>Java中，什么是构造函数？什么是构造函数重载？什么是复制构造函数？</h4><blockquote><p>当新对象被创建的时候，构造函数会被调用。每一个类都有构造函数。在程序员没有给类提供构造函数的情况下，Java编译器会为这个类创建一个默认的构造函数。<br>Java中构造函数重载和方法重载很相似。可以为一个类创建多个构造函数。每一个构造函数必须有它自己唯一的参数列表。<br>Java不支持像C++中那样的复制构造函数，这个不同点是因为如果你不自己写构造函数的情况下，Java不会创建默认的复制构造函数。</p></blockquote><h4 id="Java支持多继承么？"><a href="#Java支持多继承么？" class="headerlink" title="Java支持多继承么？"></a>Java支持多继承么？</h4><blockquote><p>不支持，Java不支持多继承。每个类都只能继承一个类，但是可以实现多个接口。</p></blockquote><h4 id="接口和抽象类的区别是什么？"><a href="#接口和抽象类的区别是什么？" class="headerlink" title="接口和抽象类的区别是什么？"></a>接口和抽象类的区别是什么？</h4><blockquote><p>Java提供和支持创建抽象类和接口。它们的实现有共同点，不同点在于：</p><ol><li>接口中所有的方法隐含的都是抽象的。而抽象类则可以同时包含抽象和非抽象的方法。</li><li>类可以实现很多个接口，但是只能继承一个抽象类</li><li>类如果要实现一个接口，它必须要实现接口声明的所有方法。但是，类可以不实现抽象类声明的所有方法，当然，在这种情况下，类也必须得声明成是抽象的。</li><li>抽象类可以在不提供接口方法实现的情况下实现接口。</li><li>Java接口中声明的变量默认都是final的。抽象类可以包含非final的变量。</li><li>Java接口中的成员函数默认是public的。抽象类的成员函数可以是private，protected或者是public。</li><li>接口是绝对抽象的，不可以被实例化。抽象类也不可以被实例化，但是，如果它包含main方法的话是可以被调用的。</li></ol></blockquote><h4 id="什么是值传递和引用传递？"><a href="#什么是值传递和引用传递？" class="headerlink" title="什么是值传递和引用传递？"></a>什么是值传递和引用传递？</h4><blockquote><p>对象被值传递，意味着传递了对象的一个副本。因此，就算是改变了对象副本，也不会影响源对象的值。<br>对象被引用传递，意味着传递的并不是实际的对象，而是对象的引用。因此，外部对引用对象所做的改变会反映到所有的对象上。</p></blockquote><h4 id="进程和线程的区别是什么？"><a href="#进程和线程的区别是什么？" class="headerlink" title="进程和线程的区别是什么？"></a>进程和线程的区别是什么？</h4><blockquote><p>进程是执行着的应用程序，而线程是进程内部的一个执行序列。一个进程可以有多个线程。线程又叫做轻量级进程。</p></blockquote><h4 id="创建线程有几种不同的方式？哪一种更受欢迎？为什么？"><a href="#创建线程有几种不同的方式？哪一种更受欢迎？为什么？" class="headerlink" title="创建线程有几种不同的方式？哪一种更受欢迎？为什么？"></a>创建线程有几种不同的方式？哪一种更受欢迎？为什么？</h4><blockquote><p>有三种方式可以用来创建线程：</p><ol><li>继承Thread类</li><li>实现Runnable接口</li><li>应用程序可以使用Executor框架来创建线程池</li></ol></blockquote><blockquote><p>实现Runnable接口这种方式更受欢迎，因为这不需要继承Thread类。在应用设计中已经继承了别的对象的情况下，这需要多继承（而Java不支持多继承），只能实现接口。同时，线程池也是非常高效的，很容易实现和使用。</p></blockquote><h4 id="概括的解释下线程的几种可用状态。"><a href="#概括的解释下线程的几种可用状态。" class="headerlink" title="概括的解释下线程的几种可用状态。"></a>概括的解释下线程的几种可用状态。</h4><blockquote><p>线程在执行过程中，可以处于下面几种状态：<br>就绪(Runnable):线程准备运行，不一定立马就能开始执行。<br>运行中(Running)：进程正在执行线程的代码。<br>等待中(Waiting):线程处于阻塞的状态，等待外部的处理结束。<br>睡眠中(Sleeping)：线程被强制睡眠。<br>I/O阻塞(Blocked on I/O)：等待I/O操作完成。<br>同步阻塞(Blocked on Synchronization)：等待获取锁。<br>死亡(Dead)：线程完成了执行。</p></blockquote><h4 id="同步方法和同步代码块的区别是什么？"><a href="#同步方法和同步代码块的区别是什么？" class="headerlink" title="同步方法和同步代码块的区别是什么？"></a>同步方法和同步代码块的区别是什么？</h4><blockquote><p>在Java语言中，每一个对象有一把锁。线程可以使用synchronized关键字来获取对象上的锁。synchronized关键字可应用在方法级别(粗粒度锁)或者是代码块级别(细粒度锁)。</p></blockquote><h4 id="什么是死锁-deadlock-？"><a href="#什么是死锁-deadlock-？" class="headerlink" title="什么是死锁(deadlock)？"></a>什么是死锁(deadlock)？</h4><blockquote><p>两个进程都在等待对方执行完毕才能继续往下执行的时候就发生了死锁。结果就是两个进程都陷入了无限的等待中。</p></blockquote><h4 id="如何确保N个线程可以访问N个资源同时又不导致死锁？"><a href="#如何确保N个线程可以访问N个资源同时又不导致死锁？" class="headerlink" title="如何确保N个线程可以访问N个资源同时又不导致死锁？"></a>如何确保N个线程可以访问N个资源同时又不导致死锁？</h4><blockquote><p>使用多线程的时候，一种非常简单的避免死锁的方式就是：指定获取锁的顺序，并强制线程按照指定的顺序获取锁。因此，如果所有的线程都是以同样的顺序加锁和释放锁，就不会出现死锁了。</p></blockquote><h4 id="Java集合类框架的基本接口有哪些？"><a href="#Java集合类框架的基本接口有哪些？" class="headerlink" title="Java集合类框架的基本接口有哪些？"></a>Java集合类框架的基本接口有哪些？</h4><blockquote><p>集合类接口指定了一组叫做元素的对象。集合类接口的每一种具体的实现类都可以选择以它自己的方式对元素进行保存和排序。有的集合类允许重复的键，有些不允许。<br>Java集合类提供了一套设计良好的支持对一组对象进行操作的接口和类。Java集合类里面最基本的接口有：</p><ol><li>Collection：代表一组对象，每一个对象都是它的子元素。</li><li>Set：不包含重复元素的Collection。</li><li>List：有顺序的collection，并且可以包含重复元素。</li><li>Map：可以把键(key)映射到值(value)的对象，键不能重复。</li></ol></blockquote><h4 id="为什么集合类没有实现Cloneable和Serializable接口？"><a href="#为什么集合类没有实现Cloneable和Serializable接口？" class="headerlink" title="为什么集合类没有实现Cloneable和Serializable接口？"></a>为什么集合类没有实现Cloneable和Serializable接口？</h4><blockquote><p>克隆(cloning)或者是序列化(serialization)的语义和含义是跟具体的实现相关的。因此，应该由集合类的具体实现来决定如何被克隆或者是序列化。</p></blockquote><h4 id="什么是迭代器-Iterator-？"><a href="#什么是迭代器-Iterator-？" class="headerlink" title="什么是迭代器(Iterator)？"></a>什么是迭代器(Iterator)？</h4><blockquote><p>Iterator接口提供了很多对集合元素进行迭代的方法。每一个集合类都包含了可以返回迭代器实例的迭代方法。迭代器可以在迭代的过程中删除底层集合的元素。</p></blockquote><h4 id="Iterator和ListIterator的区别是什么？"><a href="#Iterator和ListIterator的区别是什么？" class="headerlink" title="Iterator和ListIterator的区别是什么？"></a>Iterator和ListIterator的区别是什么？</h4><blockquote><ol><li>Iterator可用来遍历Set和List集合，但是ListIterator只能用来遍历List。</li><li>Iterator对集合只能是前向遍历，ListIterator既可以前向也可以后向。</li><li>ListIterator实现了Iterator接口，并包含其他的功能，比如：增加元素，替换元素，获取前一个和后一个元素的索引，等等。</li></ol></blockquote><h4 id="快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？"><a href="#快速失败-fail-fast-和安全失败-fail-safe-的区别是什么？" class="headerlink" title="快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？"></a>快速失败(fail-fast)和安全失败(fail-safe)的区别是什么？</h4><blockquote><p>Iterator的安全失败是基于对底层集合做拷贝，因此，它不受源集合上修改的影响。java.util包下面的所有的集合类都是快速失败的，而java.util.concurrent包下面的所有的类都是安全失败的。快速失败的迭代器会抛出ConcurrentModificationException异常，而安全失败的迭代器永远不会抛出这样的异常。</p></blockquote><h4 id="Java中的HashMap的工作原理是什么？"><a href="#Java中的HashMap的工作原理是什么？" class="headerlink" title="Java中的HashMap的工作原理是什么？"></a>Java中的HashMap的工作原理是什么？</h4><blockquote><p>Java中的HashMap是以键值对(key-value)的形式存储元素的。HashMap需要一个hash函数，它使用hashCode()和equals()方法来向集合/从集合添加和检索元素。当调用put()方法的时候，HashMap会计算key的hash值，然后把键值对存储在集合中合适的索引上。如果key已经存在了，value会被更新成新值。<br>HashMap的一些重要的特性是它的容量(capacity)，负载因子(load factor)和扩容极限(threshold resizing)。</p></blockquote><h4 id="hashCode-和equals-方法的重要性体现在什么地方？"><a href="#hashCode-和equals-方法的重要性体现在什么地方？" class="headerlink" title="hashCode()和equals()方法的重要性体现在什么地方？"></a>hashCode()和equals()方法的重要性体现在什么地方？</h4><blockquote><p>Java中的HashMap使用hashCode()和equals()方法来确定键值对的索引，当根据键获取值的时候也会用到这两个方法。如果没有正确的实现这两个方法，两个不同的键可能会有相同的hash值，因此，可能会被集合认为是相等的。而且，这两个方法也用来发现重复元素。所以这两个方法的实现对HashMap的精确性和正确性是至关重要的。</p></blockquote><h4 id="HashMap和Hashtable有什么区别？"><a href="#HashMap和Hashtable有什么区别？" class="headerlink" title="HashMap和Hashtable有什么区别？"></a>HashMap和Hashtable有什么区别？</h4><blockquote><p>HashMap和Hashtable都实现了Map接口，因此很多特性非常相似。但是，他们有以下不同点：</p><ol><li>HashMap允许键和值是null，而Hashtable不允许键或者值是null。</li><li>Hashtable是同步的，而HashMap不是。因此，HashMap更适合于单线程环境，而Hashtable适合于多线程环境。</li><li>HashMap提供了可供应用迭代的键的集合，因此，HashMap是快速失败的。另一方面，Hashtable提供了对键的列举(Enumeration)。</li><li>一般认为Hashtable是一个遗留的类。</li></ol></blockquote><h4 id="数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？"><a href="#数组-Array-和列表-ArrayList-有什么区别？什么时候应该使用Array而不是ArrayList？" class="headerlink" title="数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？"></a>数组(Array)和列表(ArrayList)有什么区别？什么时候应该使用Array而不是ArrayList？</h4><blockquote><p>下面列出了Array和ArrayList的不同点：</p><ol><li>Array可以包含基本类型和对象类型，ArrayList只能包含对象类型。</li><li>Array大小是固定的，ArrayList的大小是动态变化的。</li><li>ArrayList提供了更多的方法和特性，比如：addAll()，removeAll()，iterator()等等。</li><li>对于基本类型数据，集合使用自动装箱来减少编码工作量。但是，当处理固定大小的基本数据类型的时候，这种方式相对比较慢。</li></ol></blockquote><h4 id="ArrayList和LinkedList有什么区别？"><a href="#ArrayList和LinkedList有什么区别？" class="headerlink" title="ArrayList和LinkedList有什么区别？"></a>ArrayList和LinkedList有什么区别？</h4><blockquote><p>ArrayList和LinkedList都实现了List接口，他们有以下的不同点：</p><ol><li>ArrayList是基于索引的数据接口，它的底层是数组。它可以以O(1)时间复杂度对元素进行随机访问。与此对应，LinkedList是以元素列表的形式存储它的数据，每一个元素都和它的前一个和后一个元素链接在一起，在这种情况下，查找某个元素的时间复杂度是O(n)。</li><li>相对于ArrayList，LinkedList的插入，添加，删除操作速度更快，因为当元素被添加到集合任意位置的时候，不需要像数组那样重新计算大小或者是更新索引。</li><li>LinkedList比ArrayList更占内存，因为LinkedList为每一个节点存储了两个引用，一个指向前一个元素，一个指向下一个元素。</li></ol></blockquote><h4 id="Comparable和Comparator接口是干什么的？列出它们的区别。"><a href="#Comparable和Comparator接口是干什么的？列出它们的区别。" class="headerlink" title="Comparable和Comparator接口是干什么的？列出它们的区别。"></a>Comparable和Comparator接口是干什么的？列出它们的区别。</h4><blockquote><p>Java提供了只包含一个compareTo()方法的Comparable接口。这个方法可以个给两个对象排序。具体来说，它返回负数，0，正数来表明输入对象小于，等于，大于已经存在的对象。<br>Java提供了包含compare()和equals()两个方法的Comparator接口。compare()方法用来给两个输入参数排序，返回负数，0，正数表明第一个参数是小于，等于，大于第二个参数。equals()方法需要一个对象作为参数，它用来决定输入参数是否和comparator相等。只有当输入参数也是一个comparator并且输入参数和当前comparator的排序结果是相同的时候，这个方法才返回true。</p></blockquote><h4 id="什么是Java优先级队列-Priority-Queue"><a href="#什么是Java优先级队列-Priority-Queue" class="headerlink" title="什么是Java优先级队列(Priority Queue)"></a>什么是Java优先级队列(Priority Queue)</h4><blockquote><p>PriorityQueue是一个基于优先级堆的无界队列，它的元素是按照自然顺序(natural order)排序的。在创建的时候，我们可以给它提供一个负责给元素排序的比较器。PriorityQueue不允许null值，因为他们没有自然顺序，或者说他们没有任何的相关联的比较器。最后，PriorityQueue不是线程安全的，入队和出队的时间复杂度是O(log(n))。</p></blockquote><h4 id="你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？"><a href="#你了解大O符号-big-O-notation-么？你能给出不同数据结构的例子么？" class="headerlink" title="你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？"></a>你了解大O符号(big-O notation)么？你能给出不同数据结构的例子么？</h4><blockquote><p>大O符号描述了当数据结构里面的元素增加的时候，算法的规模或者是性能在最坏的场景下有多么好。<br>大O符号也可用来描述其他的行为，比如：内存消耗。因为集合类实际上是数据结构，我们一般使用大O符号基于时间，内存和性能来选择最好的实现。大O符号可以对大量数据的性能给出一个很好的说明。</p></blockquote><h4 id="Java集合类框架的最佳实践有哪些？"><a href="#Java集合类框架的最佳实践有哪些？" class="headerlink" title="Java集合类框架的最佳实践有哪些？"></a>Java集合类框架的最佳实践有哪些？</h4><blockquote><p>根据应用的需要正确选择要使用的集合的类型对性能非常重要，比如：假如元素的大小是固定的，而且能事先知道，我们就应该用Array而不是ArrayList。<br>有些集合类允许指定初始容量。因此，如果我们能估计出存储的元素的数目，我们可以设置初始容量来避免重新计算hash值或者是扩容。<br>为了类型安全，可读性和健壮性的原因总是要使用泛型。同时，使用泛型还可以避免运行时的ClassCastException。<br>使用JDK提供的不变类(immutable class)作为Map的键可以避免为我们自己的类实现hashCode()和equals()方法。<br>编程的时候接口优于实现。<br>底层的集合实际上是空的情况下，返回长度是0的集合或者是数组，不要返回null。</p></blockquote><h4 id="Enumeration接口和Iterator接口的区别有哪些？"><a href="#Enumeration接口和Iterator接口的区别有哪些？" class="headerlink" title="Enumeration接口和Iterator接口的区别有哪些？"></a>Enumeration接口和Iterator接口的区别有哪些？</h4><blockquote><p>Enumeration速度是Iterator的2倍，同时占用更少的内存。但是，Iterator远远比Enumeration安全，因为其他线程不能够修改正在被iterator遍历的集合里面的对象。同时，Iterator允许调用者删除底层集合里面的元素，这对Enumeration来说是不可能的。</p></blockquote><h4 id="HashSet和TreeSet有什么区别？"><a href="#HashSet和TreeSet有什么区别？" class="headerlink" title="HashSet和TreeSet有什么区别？"></a>HashSet和TreeSet有什么区别？</h4><blockquote><p>HashSet是由一个hash表来实现的，因此，它的元素是无序的。add()，remove()，contains()方法的时间复杂度是O(1)。<br>另一方面，TreeSet是由一个树形的结构来实现的，它里面的元素是有序的。因此，add()，remove()，contains()方法的时间复杂度是O(logn)。</p></blockquote><h4 id="Java中垃圾回收有什么目的？什么时候进行垃圾回收？"><a href="#Java中垃圾回收有什么目的？什么时候进行垃圾回收？" class="headerlink" title="Java中垃圾回收有什么目的？什么时候进行垃圾回收？"></a>Java中垃圾回收有什么目的？什么时候进行垃圾回收？</h4><blockquote><p>垃圾回收的目的是识别并且丢弃应用不再使用的对象来释放和重用资源。</p></blockquote><h4 id="System-gc-和Runtime-gc-会做什么事情？"><a href="#System-gc-和Runtime-gc-会做什么事情？" class="headerlink" title="System.gc()和Runtime.gc()会做什么事情？"></a>System.gc()和Runtime.gc()会做什么事情？</h4><blockquote><p>这两个方法用来提示JVM要进行垃圾回收。但是，立即开始还是延迟进行垃圾回收是取决于JVM的。</p></blockquote><h4 id="finalize-方法什么时候被调用？析构函数-finalization-的目的是什么？"><a href="#finalize-方法什么时候被调用？析构函数-finalization-的目的是什么？" class="headerlink" title="finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？"></a>finalize()方法什么时候被调用？析构函数(finalization)的目的是什么？</h4><blockquote><p>在释放对象占用的内存之前，垃圾收集器会调用对象的finalize()方法。一般建议在该方法中释放对象持有的资源。</p></blockquote><h4 id="如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"><a href="#如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？" class="headerlink" title="如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？"></a>如果对象的引用被置为null，垃圾收集器是否会立即释放对象占用的内存？</h4><blockquote><p>不会，在下一个垃圾回收周期中，这个对象将是可被回收的。</p></blockquote><h4 id="Java中的两种异常类型是什么？他们有什么区别？"><a href="#Java中的两种异常类型是什么？他们有什么区别？" class="headerlink" title="Java中的两种异常类型是什么？他们有什么区别？"></a>Java中的两种异常类型是什么？他们有什么区别？</h4><blockquote><p>Java中有两种异常：受检查的(checked)异常和不受检查的(unchecked)异常。不受检查的异常不需要在方法或者是构造函数上声明，就算方法或者是构造函数的执行可能会抛出这样的异常，并且不受检查的异常可以传播到方法或者是构造函数的外面。相反，受检查的异常必须要用throws语句在方法或者是构造函数上声明。</p></blockquote><h4 id="Java中Exception和Error有什么区别？"><a href="#Java中Exception和Error有什么区别？" class="headerlink" title="Java中Exception和Error有什么区别？"></a>Java中Exception和Error有什么区别？</h4><blockquote><p>Exception和Error都是Throwable的子类。Exception用于用户程序可以捕获的异常情况。Error定义了不期望被用户程序捕获的异常。</p></blockquote><h4 id="throw和throws有什么区别？"><a href="#throw和throws有什么区别？" class="headerlink" title="throw和throws有什么区别？"></a>throw和throws有什么区别？</h4><blockquote><p>throw关键字用来在程序中明确的抛出异常，相反，throws语句用来表明方法不能处理的异常。每一个方法都必须要指定哪些异常不能处理，所以方法的调用者才能够确保处理可能发生的异常，多个异常是用逗号分隔的。</p></blockquote><h4 id="异常处理的时候，finally代码块的重要性是什么？"><a href="#异常处理的时候，finally代码块的重要性是什么？" class="headerlink" title="异常处理的时候，finally代码块的重要性是什么？"></a>异常处理的时候，finally代码块的重要性是什么？</h4><blockquote><p>无论是否抛出异常，finally代码块总是会被执行。就算是没有catch语句同时又抛出异常的情况下，finally代码块仍然会被执行。最后要说的是，finally代码块主要用来释放资源，比如：I/O缓冲区，数据库连接。</p></blockquote><h4 id="异常处理完成以后，Exception对象会发生什么变化？"><a href="#异常处理完成以后，Exception对象会发生什么变化？" class="headerlink" title="异常处理完成以后，Exception对象会发生什么变化？"></a>异常处理完成以后，Exception对象会发生什么变化？</h4><blockquote><p>Exception对象会在下一个垃圾回收过程中被回收掉。</p></blockquote><h4 id="什么是JDBC？"><a href="#什么是JDBC？" class="headerlink" title="什么是JDBC？"></a>什么是JDBC？</h4><blockquote><p>JDBC是允许用户在不同数据库之间做选择的一个抽象层。JDBC允许开发者用JAVA写数据库应用程序，而不需要关心底层特定数据库的细节。</p></blockquote><h4 id="数据库连接池是什么意思？"><a href="#数据库连接池是什么意思？" class="headerlink" title="数据库连接池是什么意思？"></a>数据库连接池是什么意思？</h4><blockquote><p>像打开关闭数据库连接这种和数据库的交互可能是很费时的，尤其是当客户端数量增加的时候，会消耗大量的资源，成本是非常高的。可以在应用服务器启动的时候建立很多个数据库连接并维护在一个池中。连接请求由池中的连接提供。在连接使用完毕以后，把连接归还到池中，以用于满足将来更多的请求。</p></blockquote><h4 id="解释下Serialization"><a href="#解释下Serialization" class="headerlink" title="解释下Serialization"></a>解释下Serialization</h4><blockquote><p>Java提供了一种叫做对象序列化的机制，他把对象表示成一连串的字节，里面包含了对象的数据，对象的类型信息，对象内部的数据的类型信息等等。因此，序列化可以看成是为了把对象存储在磁盘上或者是从磁盘上读出来并重建对象而把对象扁平化的一种方式。</p></blockquote><h4 id="什么是Servlet？"><a href="#什么是Servlet？" class="headerlink" title="什么是Servlet？"></a>什么是Servlet？</h4><blockquote><p>Servlet是用来处理客户端请求并产生动态网页内容的Java类。Servlet主要是用来处理或者是存储HTML表单提交的数据，产生动态内容，在无状态的HTTP协议下管理状态信息。</p></blockquote><h4 id="说一下Servlet的体系结构。"><a href="#说一下Servlet的体系结构。" class="headerlink" title="说一下Servlet的体系结构。"></a>说一下Servlet的体系结构。</h4><blockquote><p>所有的Servlet都必须要实现的核心的接口是javax.servlet.Servlet。每一个Servlet都必须要直接或者是间接实现这个接口，或者是继承javax.servlet.GenericServlet或者javax.servlet.http.HTTPServlet。最后，Servlet使用多线程可以并行的为多个请求服务。</p></blockquote><h4 id="解释下Servlet的生命周期。"><a href="#解释下Servlet的生命周期。" class="headerlink" title="解释下Servlet的生命周期。"></a>解释下Servlet的生命周期。</h4><blockquote><p>服务器启动时(web.xml中配置load-on-startup=1，默认为0)或者第一次请求该servlet时，就会初始化一个Servlet对象，也就是会执行初始化方法init(ServletConfig conf),该servlet对象去处理所有客户端请求，在service(ServletRequest req，ServletResponse res)方法中执行,最后服务器关闭时，才会销毁这个servlet对象，执行destroy()方法。</p></blockquote><h4 id="doGet-方法和doPost-方法有什么区别？"><a href="#doGet-方法和doPost-方法有什么区别？" class="headerlink" title="doGet()方法和doPost()方法有什么区别？"></a>doGet()方法和doPost()方法有什么区别？</h4><blockquote><p>doGet：GET方法会把名值对追加在请求的URL后面。因为URL对字符数目有限制，进而限制了用在客户端请求的参数值的数目。并且请求中的参数值是可见的，因此，敏感信息不能用这种方式传递。<br>doPOST：POST方法通过把请求参数值放在请求体中来克服GET方法的限制，因此，可以发送的参数的数目是没有限制的。最后，通过POST请求传递的敏感信息对外部客户端是不可见的。</p></blockquote><h4 id="什么是Web应用程序？"><a href="#什么是Web应用程序？" class="headerlink" title="什么是Web应用程序？"></a>什么是Web应用程序？</h4><blockquote><p>Web应用程序是对Web或者是应用服务器的动态扩展。有两种类型的Web应用：面向表现的和面向服务的。面向表现的Web应用程序会产生包含了很多种标记语言和动态内容的交互的web页面作为对请求的响应。而面向服务的Web应用实现了Web服务的端点(endpoint)。一般来说，一个Web应用可以看成是一组安装在服务器URL名称空间的特定子集下面的Servlet的集合。</p></blockquote><h4 id="如何知道是哪一个客户端的机器正在请求你的Servlet？"><a href="#如何知道是哪一个客户端的机器正在请求你的Servlet？" class="headerlink" title="如何知道是哪一个客户端的机器正在请求你的Servlet？"></a>如何知道是哪一个客户端的机器正在请求你的Servlet？</h4><blockquote><p>ServletRequest类可以找出客户端机器的IP地址或者是主机名。getRemoteAddr()方法获取客户端主机的IP地址，getRemoteHost()可以获取主机名。</p></blockquote><h4 id="HTTP响应的结构是怎么样的？"><a href="#HTTP响应的结构是怎么样的？" class="headerlink" title="HTTP响应的结构是怎么样的？"></a>HTTP响应的结构是怎么样的？</h4><blockquote><p>HTTP响应由三个部分组成：<br>状态码(Status Code)：描述了响应的状态。可以用来检查是否成功的完成了请求。请求失败的情况下，状态码可用来找出失败的原因。如果Servlet没有返回状态码，默认会返回成功的状态码HttpServletResponse.SC_OK。<br>HTTP头部(HTTP Header)：它们包含了更多关于响应的信息。比如：头部可以指定认为响应过期的过期日期，或者是指定用来给用户安全的传输实体内容的编码格式。<br>主体(Body)：它包含了响应的内容。它可以包含HTML代码，图片，等等。主体是由传输在HTTP消息中紧跟在头部后面的数据字节组成的。</p></blockquote><h4 id="什么是cookie？session和cookie有什么区别？"><a href="#什么是cookie？session和cookie有什么区别？" class="headerlink" title="什么是cookie？session和cookie有什么区别？"></a>什么是cookie？session和cookie有什么区别？</h4><blockquote><p>cookie是Web服务器发送给浏览器的一块信息。浏览器会在本地文件中给每一个Web服务器存储cookie。以后浏览器在给特定的Web服务器发请求的时候，同时会发送所有为该服务器存储的cookie。下面列出了session和cookie的区别：<br>无论客户端浏览器做怎么样的设置，session都应该能正常工作。客户端可以选择禁用cookie，但是，session仍然是能够工作的，因为客户端无法禁用服务端的session。<br>在存储的数据量方面session和cookies也是不一样的。session能够存储任意的Java对象，cookie只能存储String类型的对象。</p></blockquote><h4 id="sendRedirect-和forward-方法有什么区别？"><a href="#sendRedirect-和forward-方法有什么区别？" class="headerlink" title="sendRedirect()和forward()方法有什么区别？"></a>sendRedirect()和forward()方法有什么区别？</h4><blockquote><p>sendRedirect()方法会创建一个新的请求，而forward()方法只是把请求转发到一个新的目标上。重定向(redirect)以后，之前请求作用域范围以内的对象就失效了，因为会产生一个新的请求，而转发(forwarding)以后，之前请求作用域范围以内的对象还是能访问的。一般认为sendRedirect()比forward()要慢。</p></blockquote><h4 id="什么是URL编码和URL解码？"><a href="#什么是URL编码和URL解码？" class="headerlink" title="什么是URL编码和URL解码？"></a>什么是URL编码和URL解码？</h4><blockquote><p>URL编码是负责把URL里面的空格和其他的特殊字符替换成对应的十六进制表示，反之就是解码。</p></blockquote><h4 id="什么是JSP页面？"><a href="#什么是JSP页面？" class="headerlink" title="什么是JSP页面？"></a>什么是JSP页面？</h4><blockquote><p>JSP页面是一种包含了静态数据和JSP元素两种类型的文本的文本文档。静态数据可以用任何基于文本的格式来表示，比如：HTML或者XML。JSP是一种混合了静态内容和动态产生的内容的技术。</p></blockquote><h4 id="JSP请求是如何被处理的？"><a href="#JSP请求是如何被处理的？" class="headerlink" title="JSP请求是如何被处理的？"></a>JSP请求是如何被处理的？</h4><blockquote><p>浏览器首先要请求一个以.jsp扩展名结尾的页面，发起JSP请求，然后，Web服务器读取这个请求，使用JSP编译器把JSP页面转化成一个Servlet类。需要注意的是，只有当第一次请求页面或者是JSP文件发生改变的时候JSP文件才会被编译，然后服务器调用servlet类，处理浏览器的请求。一旦请求执行结束，servlet会把响应发送给客户端。</p></blockquote><h4 id="JSP有什么优点？"><a href="#JSP有什么优点？" class="headerlink" title="JSP有什么优点？"></a>JSP有什么优点？</h4><blockquote><p>JSP页面是被动态编译成Servlet的，因此，开发者可以很容易的更新展现代码。<br>JSP页面可以被预编译。<br>JSP页面可以很容易的和静态模板结合，包括：HTML或者XML，也可以很容易的和产生动态内容的代码结合起来。<br>开发者可以提供让页面设计者以类XML格式来访问的自定义的JSP标签库。<br>开发者可以在组件层做逻辑上的改变，而不需要编辑单独使用了应用层逻辑的页面。</p></blockquote><h4 id="String，-Stringbuffer，-StringBuilder-的区别"><a href="#String，-Stringbuffer，-StringBuilder-的区别" class="headerlink" title="String， Stringbuffer， StringBuilder 的区别"></a>String， Stringbuffer， StringBuilder 的区别</h4><p><strong>未完待续</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;面向对象编程（OOP）&quot;&gt;&lt;a href=&quot;#面向对象编程（OOP）&quot; class=&quot;headerlink&quot; title=&quot;面向对象编程（OOP）&quot;&gt;&lt;/a&gt;面向对象编程（OOP）&lt;/h4&gt;&lt;blockquote&gt;
&lt;p&gt;Java是一个支持并发、基于类和面向对象的计算机编程语言。下面列出了面向对象软件开发的优点：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;代码开发模块化，更易维护和修改。&lt;/li&gt;
&lt;li&gt;代码复用。&lt;/li&gt;
&lt;li&gt;增强代码的可靠性和灵活性。&lt;/li&gt;
&lt;li&gt;增加代码的可理解性。&lt;/li&gt;
&lt;li&gt;面向对象编程有很多重要的特性，比如：封装，继承，多态和抽象&lt;/li&gt;
&lt;/ol&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/tags/Java/"/>
    
      <category term="面试题" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E9%9D%A2%E8%AF%95%E9%A2%98/"/>
    
  </entry>
  
  <entry>
    <title>Mysql常用函数整理</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Mysql%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0%E6%95%B4%E7%90%86/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Mysql常用函数整理/</id>
    <published>2018-03-15T14:59:24.000Z</published>
    <updated>2018-03-16T01:14:29.969Z</updated>
    
    <content type="html"><![CDATA[<p><strong>经常编写程序的一定体会得到函数的重要性，丰富的函数往往能让工作事半功倍。</strong><br><a id="more"></a></p><h4 id="字符串函数"><a href="#字符串函数" class="headerlink" title="字符串函数"></a>字符串函数</h4><table><thead><tr><th>函数</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td>concat(S1,S2,…Sn)</td><td style="text-align:left">连接 S1,S2,…Sn 为一个字符串</td></tr><tr><td>insert(str,x,y,instr)</td><td style="text-align:left">将字符串 str 从 x 位置开始，y 个字符长的子串替换为 instr</td></tr><tr><td>lower(str)</td><td style="text-align:left">将字符串 str 中所有字符变为小写</td></tr><tr><td>upper(str)</td><td style="text-align:left">将字符串 str 中所有字符变为大写</td></tr><tr><td>left(str,x)</td><td style="text-align:left">返回字符串 str 最左边的 x 个字符</td></tr><tr><td>right(str,x)</td><td style="text-align:left">返回字符串 str 最左边的 x 个字符</td></tr><tr><td>lpad(str,n,pad)</td><td style="text-align:left">用字符串 pad 对 str 最左边进行填充，知道长度为n个字符串</td></tr><tr><td>rpad(str,n,pad)</td><td style="text-align:left">用字符串 pad 对 str 最右边进行填充，知道长度为n个字符串</td></tr><tr><td>ltrim(str)</td><td style="text-align:left">去掉字符串 str 左侧的空格</td></tr><tr><td>rtrim(str)</td><td style="text-align:left">去掉字符串 str 右侧的空格</td></tr><tr><td>repeat(str,x)</td><td style="text-align:left">返回 str 重复 x 次的结果</td></tr><tr><td>replace(str,a,b)</td><td style="text-align:left">用字符串 b 替换字符串 str 中所有出现的字符串 a</td></tr><tr><td>strcmp(s1,s2)</td><td style="text-align:left">比较字符串 s1 和 s2</td></tr><tr><td>trim(str)</td><td style="text-align:left">去掉字符串 str 行尾和行头的空格</td></tr><tr><td>substring(str,x,y)</td><td style="text-align:left">返回从字符串str x 位置起 y 个字符长度的字串</td></tr></tbody></table><h4 id="数值函数"><a href="#数值函数" class="headerlink" title="数值函数"></a>数值函数</h4><table><thead><tr><th>函数</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td>abs(x)</td><td style="text-align:left">返回 x 的绝对值</td></tr><tr><td>ceil(x)</td><td style="text-align:left">返回大于 x 的最小正整数值</td></tr><tr><td>floor(x)</td><td style="text-align:left">返回小于 x 的最大正整数值</td></tr><tr><td>mod(x,y)</td><td style="text-align:left">返回 x/y 的模</td></tr><tr><td>rand()</td><td style="text-align:left">返回 0~1 内的随机值</td></tr><tr><td>round(x,y)</td><td style="text-align:left">返回参数 x 的四舍五入的有 y 位小数的值</td></tr><tr><td>truncate(x,y)</td><td style="text-align:left">返回数字 x 截断为 y 位小数的结果</td></tr></tbody></table><h4 id="日期和时间的函数"><a href="#日期和时间的函数" class="headerlink" title="日期和时间的函数"></a>日期和时间的函数</h4><table><thead><tr><th>函数</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td>curdate()</td><td style="text-align:left">返回当前日期</td></tr><tr><td>curtime()</td><td style="text-align:left">返回当前时间</td></tr><tr><td>now()</td><td style="text-align:left">返回当前的日期和时间</td></tr><tr><td>unix_timestamp(data)</td><td style="text-align:left">返回日期date的UNIX时间戳</td></tr><tr><td>from_unixtime</td><td style="text-align:left">返回UNIX时间戳的日期值</td></tr><tr><td>week(date)</td><td style="text-align:left">返回日期date为一年中的第几周</td></tr><tr><td>year(date)</td><td style="text-align:left">返回日期date的年份</td></tr><tr><td>hour(time)</td><td style="text-align:left">返回time的小时值</td></tr><tr><td>minute(time)</td><td style="text-align:left">返回time的分钟值</td></tr><tr><td>monthname(date)</td><td style="text-align:left">返回date的月份名</td></tr><tr><td>date_format(date,fmt)</td><td style="text-align:left">返回按字符串 fmt 格式化日期 date 值</td></tr><tr><td>date_add(date,interval expr type)</td><td style="text-align:left">返回一个日期或时间值加上一个时间间隔的时间值</td></tr><tr><td>datediff(expr,expr2)</td><td style="text-align:left">返回起始时间 expr 和结束时间 expr2 之前的天数</td></tr></tbody></table><h4 id="MySQL中的日期和时间格式"><a href="#MySQL中的日期和时间格式" class="headerlink" title="MySQL中的日期和时间格式"></a>MySQL中的日期和时间格式</h4><table><thead><tr><th>格式符</th><th style="text-align:left">格式说明</th></tr></thead><tbody><tr><td>%S 和 %s</td><td style="text-align:left">两位数字形式的秒（00,01,…,59）</td></tr><tr><td>%i</td><td style="text-align:left">两位数字形式的分（00,01,…,59）</td></tr><tr><td>%H</td><td style="text-align:left">两位数字形式的小时，24小时（00,01,…,23）</td></tr><tr><td>%h 和 %I</td><td style="text-align:left">两位数字形式的小时，12小时（00,01,…,12）</td></tr><tr><td>%k</td><td style="text-align:left">数字形式的小时，24小时（0,1,…,23）</td></tr><tr><td>%1</td><td style="text-align:left">数字形式的小时，12小时（1,2,…,12）</td></tr><tr><td>%T</td><td style="text-align:left">24小时的时间形式（hh : mm : ss）</td></tr><tr><td>%r</td><td style="text-align:left">12小时的时间形式（hh : mm : ss AM或hh : mm : ss PM）</td></tr><tr><td>%p</td><td style="text-align:left">AM或PM</td></tr><tr><td>%W</td><td style="text-align:left">一周中每一天的名称（Sunday,Monday,…,Saturday）</td></tr><tr><td>%a</td><td style="text-align:left">一周中每一天名称的缩写（Sun,Mon,…,Sat）</td></tr><tr><td>%d</td><td style="text-align:left">两位数字表示月中的天数（00,01,…,31）</td></tr><tr><td>%e</td><td style="text-align:left">数字形式表示月中的天数（1,2,…,31）</td></tr><tr><td>%D</td><td style="text-align:left">英文后缀表示月中的天数（1st,2dn,3rd,…）</td></tr><tr><td>%w</td><td style="text-align:left">以数字形式表示周中的天数（0=Sunday,1=Monday,…,6=Saturday）</td></tr><tr><td>%j</td><td style="text-align:left">以3位数字表示年中的天数（001,002,…,366）</td></tr><tr><td>%U</td><td style="text-align:left">周（0,1,52）,其中Sunday为周中的第一天</td></tr><tr><td>%u</td><td style="text-align:left">周（0,1,52）,其中Monday为周中的第一天</td></tr><tr><td>%M</td><td style="text-align:left">月名（January,February,…,December）</td></tr><tr><td>%b</td><td style="text-align:left">缩写的月名（January,February,…,December）</td></tr><tr><td>%m</td><td style="text-align:left">两位数字表示的月份（01,02,…,12）</td></tr><tr><td>%c</td><td style="text-align:left">数字表示的月份（1,2,…,12）</td></tr><tr><td>%Y</td><td style="text-align:left">4位数字表示的年份</td></tr><tr><td>%y</td><td style="text-align:left">两位数字表示的年份</td></tr><tr><td>%%</td><td style="text-align:left">直接值“%”</td></tr></tbody></table><h4 id="流程函数"><a href="#流程函数" class="headerlink" title="流程函数"></a>流程函数</h4><table><thead><tr><th>函数</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td>IF(value,t f)</td><td style="text-align:left">如果value是真，返回t；否则返回f</td></tr><tr><td>IFNULL(value1，value2)</td><td style="text-align:left">如果value1不为空，返回value1；否则返回value2</td></tr><tr><td>CASE WHEN[value1] THEN[result1]… ELSE[default]END</td><td style="text-align:left">如果value1是真，返回result1；否则返回default</td></tr><tr><td>CASE [expr] WHEN [value1] THEN [result1] … ELSE[default]END</td><td style="text-align:left">如果expr等于value1，返回result；否则返回default</td></tr></tbody></table><h4 id="其他常用函数"><a href="#其他常用函数" class="headerlink" title="其他常用函数"></a>其他常用函数</h4><table><thead><tr><th>函数</th><th style="text-align:left">功能</th></tr></thead><tbody><tr><td>datebase()</td><td style="text-align:left">返回当前数据库名</td></tr><tr><td>version()</td><td style="text-align:left">返回当前数据库版本</td></tr><tr><td>user()</td><td style="text-align:left">返回当前登录用户名</td></tr><tr><td>inet_aton(IP)</td><td style="text-align:left">返回IP地址的数字表示</td></tr><tr><td>inet_ntoa(num)</td><td style="text-align:left">返回数字代表的IP地址</td></tr><tr><td>password(str)</td><td style="text-align:left">返回字符串str的加密版本</td></tr><tr><td>MD5()</td><td style="text-align:left">返回字符串str的MD5值</td></tr></tbody></table>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;strong&gt;经常编写程序的一定体会得到函数的重要性，丰富的函数往往能让工作事半功倍。&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/tags/Mysql/"/>
    
      <category term="常用函数" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E5%B8%B8%E7%94%A8%E5%87%BD%E6%95%B0/"/>
    
  </entry>
  
  <entry>
    <title>Set和List 的关系与区别</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Set%E5%92%8CList-%E7%9A%84%E5%85%B3%E7%B3%BB%E4%B8%8E%E5%8C%BA%E5%88%AB/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Set和List-的关系与区别/</id>
    <published>2018-03-15T14:49:54.000Z</published>
    <updated>2018-03-16T01:14:29.969Z</updated>
    
    <content type="html"><![CDATA[<h4 id="两个接口都是继承自Collection"><a href="#两个接口都是继承自Collection" class="headerlink" title="两个接口都是继承自Collection"></a>两个接口都是继承自Collection</h4><h5 id="List-inteface"><a href="#List-inteface" class="headerlink" title="List (inteface)"></a>List (inteface)</h5><p><strong>次序是List 的最重要特点,它确保维护元素特定的顺序.</strong><br><a id="more"></a></p><h6 id="ArrayList：允许对元素快速随机访问。"><a href="#ArrayList：允许对元素快速随机访问。" class="headerlink" title="ArrayList：允许对元素快速随机访问。"></a>ArrayList：允许对元素快速随机访问。</h6><h6 id="LinkedList：对顺序访问进行优化，向List中间插入与移除的开销并不大，具有addFrist-，addLast-，getFirst，getLast，removeFirst和removeLast-。这些方法使得LinkedList可当作堆栈／队列／双向队列。"><a href="#LinkedList：对顺序访问进行优化，向List中间插入与移除的开销并不大，具有addFrist-，addLast-，getFirst，getLast，removeFirst和removeLast-。这些方法使得LinkedList可当作堆栈／队列／双向队列。" class="headerlink" title="LinkedList：对顺序访问进行优化，向List中间插入与移除的开销并不大，具有addFrist()，addLast()，getFirst，getLast，removeFirst和removeLast()。这些方法使得LinkedList可当作堆栈／队列／双向队列。"></a>LinkedList：对顺序访问进行优化，向List中间插入与移除的开销并不大，具有addFrist()，addLast()，getFirst，getLast，removeFirst和removeLast()。这些方法使得LinkedList可当作堆栈／队列／双向队列。</h6><h5 id="Set-inteface"><a href="#Set-inteface" class="headerlink" title="Set (inteface)"></a>Set (inteface)</h5><p><strong>存入Set 的每个元素必须唯一，不保证维护元素的次序.加入Set 的Object必须定义equals()方法</strong></p><h6 id="HashSet：为快速查找而设计的Set，存入HashSet对象必须定义hashCode-。"><a href="#HashSet：为快速查找而设计的Set，存入HashSet对象必须定义hashCode-。" class="headerlink" title="HashSet：为快速查找而设计的Set，存入HashSet对象必须定义hashCode()。"></a>HashSet：为快速查找而设计的Set，存入HashSet对象必须定义hashCode()。</h6><h6 id="TreeSet：保护次序的Set，使用它可以从Set-中提取有序序列。"><a href="#TreeSet：保护次序的Set，使用它可以从Set-中提取有序序列。" class="headerlink" title="TreeSet：保护次序的Set，使用它可以从Set 中提取有序序列。"></a>TreeSet：保护次序的Set，使用它可以从Set 中提取有序序列。</h6><h6 id="LinkedHashSet：具有HashSet的查询速度，且内部使用链表维护元素的次序。"><a href="#LinkedHashSet：具有HashSet的查询速度，且内部使用链表维护元素的次序。" class="headerlink" title="LinkedHashSet：具有HashSet的查询速度，且内部使用链表维护元素的次序。"></a>LinkedHashSet：具有HashSet的查询速度，且内部使用链表维护元素的次序。</h6><h4 id="它们之间的存储方式不一样："><a href="#它们之间的存储方式不一样：" class="headerlink" title="它们之间的存储方式不一样："></a>它们之间的存储方式不一样：</h4><h5 id="TreeSet采用红黑树的树据结构排序元素；"><a href="#TreeSet采用红黑树的树据结构排序元素；" class="headerlink" title="TreeSet采用红黑树的树据结构排序元素；"></a>TreeSet采用红黑树的树据结构排序元素；</h5><h5 id="HashSet采用散列函数，这是专门为快速查询而设计的；"><a href="#HashSet采用散列函数，这是专门为快速查询而设计的；" class="headerlink" title="HashSet采用散列函数，这是专门为快速查询而设计的；"></a>HashSet采用散列函数，这是专门为快速查询而设计的；</h5><h5 id="LinkedHashSet内部使用散列以加快查询速度，同时使用链表维护元素的次序。"><a href="#LinkedHashSet内部使用散列以加快查询速度，同时使用链表维护元素的次序。" class="headerlink" title="LinkedHashSet内部使用散列以加快查询速度，同时使用链表维护元素的次序。"></a>LinkedHashSet内部使用散列以加快查询速度，同时使用链表维护元素的次序。</h5>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;两个接口都是继承自Collection&quot;&gt;&lt;a href=&quot;#两个接口都是继承自Collection&quot; class=&quot;headerlink&quot; title=&quot;两个接口都是继承自Collection&quot;&gt;&lt;/a&gt;两个接口都是继承自Collection&lt;/h4&gt;&lt;h5 id=&quot;List-inteface&quot;&gt;&lt;a href=&quot;#List-inteface&quot; class=&quot;headerlink&quot; title=&quot;List (inteface)&quot;&gt;&lt;/a&gt;List (inteface)&lt;/h5&gt;&lt;p&gt;&lt;strong&gt;次序是List 的最重要特点,它确保维护元素特定的顺序.&lt;/strong&gt;&lt;br&gt;
    
    </summary>
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/tags/Java/"/>
    
      <category term="Set" scheme="https://cq-harry.github.io/Harry.github.io/tags/Set/"/>
    
      <category term="List" scheme="https://cq-harry.github.io/Harry.github.io/tags/List/"/>
    
  </entry>
  
  <entry>
    <title>mysql 存储实例</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/mysql-%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/mysql-存储过程/</id>
    <published>2018-03-15T14:46:04.000Z</published>
    <updated>2018-03-16T01:14:29.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="sql拼接注意："><a href="#sql拼接注意：" class="headerlink" title="sql拼接注意："></a>sql拼接注意：</h3><h4 id="单双引号"><a href="#单双引号" class="headerlink" title="单双引号"></a>单双引号</h4><h4 id="like查询"><a href="#like查询" class="headerlink" title="like查询"></a>like查询</h4><a id="more"></a><h4 id="临时表更新涉及到时间的字段最好加默认时间："><a href="#临时表更新涉及到时间的字段最好加默认时间：" class="headerlink" title="临时表更新涉及到时间的字段最好加默认时间："></a>临时表更新涉及到时间的字段最好加默认时间：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">//数据更新的时候，时间会同步更新</span><br><span class="line">create_time timestamp not null,</span><br><span class="line">//更改后</span><br><span class="line">create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br></pre></td></tr></table></figure><h4 id="能通过拼接实现的sql，尽量不用‘？’来替换参数"><a href="#能通过拼接实现的sql，尽量不用‘？’来替换参数" class="headerlink" title="能通过拼接实现的sql，尽量不用‘？’来替换参数"></a>能通过拼接实现的sql，尽量不用‘？’来替换参数</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//参数替换</span><br><span class="line">set @ssra = CONCAT(@ssra,&apos;where u.parent_id = ?&apos;);</span><br><span class="line">EXECUTE sqlquery USING @parent_id;</span><br><span class="line">//SQL拼接</span><br><span class="line">set @ssra = CONCAT(@ssra,&quot; and u.nick_name like &apos;%&quot;,@user_name,&quot;%&apos;&quot;);</span><br></pre></td></tr></table></figure><p><strong><em>参数值是desc、asc，实现前端传值排序，目前只知道拼接来实现，‘？’形式会抱错</em></strong></p><h3 id="完整例子"><a href="#完整例子" class="headerlink" title="完整例子"></a>完整例子</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br></pre></td><td class="code"><pre><span class="line">-- 导出 yiyi_db 的数据库结构</span><br><span class="line">CREATE DATABASE IF NOT EXISTS `yiyi_db` /*!40100 DEFAULT CHARACTER SET utf8 */;</span><br><span class="line">USE `yiyi_db`;</span><br><span class="line"></span><br><span class="line">-- 导出  过程 yiyi_db.get_my_promotion_list 结构</span><br><span class="line">DELIMITER //</span><br><span class="line">CREATE DEFINER=`root`@`%` PROCEDURE `get_my_promotion_list`(</span><br><span class="line">IN `user_name` VARCHAR(50),</span><br><span class="line">IN `parent_id` CHAR(32),</span><br><span class="line">IN `time_order_by` VARCHAR(20),</span><br><span class="line">IN `deal_order_by` VARCHAR(20),</span><br><span class="line">IN `page_index` INT,</span><br><span class="line">IN `size` INT</span><br><span class="line">)</span><br><span class="line">BEGIN</span><br><span class="line">set @user_name = user_name;</span><br><span class="line">set @parent_id = parent_id;</span><br><span class="line">set @time_order_by = time_order_by;</span><br><span class="line">set @deal_order_by = deal_order_by;</span><br><span class="line">set @page_index = page_index;</span><br><span class="line">set @size = size;</span><br><span class="line"></span><br><span class="line">create temporary table if not exists user_tmp(</span><br><span class="line">id char(32) not null,</span><br><span class="line">nick_name VARCHAR(100) DEFAULT NULL,</span><br><span class="line">upyun_url varchar(300) DEFAULT NULL,</span><br><span class="line">create_time TIMESTAMP NOT NULL DEFAULT CURRENT_TIMESTAMP COMMENT &apos;创建时间&apos;,</span><br><span class="line">parent_id char(32) not null,</span><br><span class="line">volume bigint not null default 0</span><br><span class="line">)ENGINE = MEMORY ;</span><br><span class="line"></span><br><span class="line">begin </span><br><span class="line">set @ssra = CONCAT(&apos;insert into user_tmp(id,nick_name,upyun_url,create_time,parent_id ) &apos;);</span><br><span class="line">set @ssra = CONCAT(@ssra,&apos;SELECT &apos;);</span><br><span class="line">set @ssra = CONCAT(@ssra,&apos;u.id,u.nick_name,u.upyun_url,u.create_time,u.parent_id &apos;);</span><br><span class="line">set @ssra = CONCAT(@ssra,&apos;from user as u &apos;);</span><br><span class="line">set @ssra = CONCAT(@ssra,&apos;where u.parent_id = ?&apos;);</span><br><span class="line">if @user_name &lt;&gt; &apos;&apos; then</span><br><span class="line">set @ssra = CONCAT(@ssra,&quot; and u.nick_name like &apos;%&quot;,@user_name,&quot;%&apos;&quot;);</span><br><span class="line">end if;</span><br><span class="line"></span><br><span class="line">PREPARE sqlquery FROM @ssra;</span><br><span class="line">EXECUTE sqlquery USING @parent_id;</span><br><span class="line"></span><br><span class="line">set @ssra = concat(&apos;update user_tmp u set volume = &apos;);</span><br><span class="line">set @ssra = concat(@ssra ,&apos; (select count(po.id) from product_order po where po.buyer_id = u.id)&apos;);</span><br><span class="line"></span><br><span class="line">PREPARE sqlquery FROM @ssra;</span><br><span class="line">EXECUTE sqlquery;</span><br><span class="line">   </span><br><span class="line">set @ssra = concat(&apos;select * from user_tmp &apos;);</span><br><span class="line"></span><br><span class="line">if @time_order_by &lt;&gt; &apos;&apos; and @deal_order_by &lt;&gt; &apos;&apos; then </span><br><span class="line">set @ssra = concat(@ssra,&apos;order by volume &apos;, @deal_order_by,&apos;,create_time &apos;,@time_order_by);</span><br><span class="line">elseif @time_order_by = &apos;&apos; and @deal_order_by = &apos;&apos; then</span><br><span class="line">set @ssra = concat(@ssra,&apos;order by volume desc,create_time desc&apos;);</span><br><span class="line">else </span><br><span class="line">if @time_order_by &lt;&gt; &apos;&apos; then</span><br><span class="line">set @ssra = concat(@ssra,&apos; order by create_time &apos;,@time_order_by);</span><br><span class="line">end if;</span><br><span class="line">if @deal_order_by &lt;&gt; &apos;&apos; then</span><br><span class="line">set @ssra = concat(@ssra,&apos; order by volume &apos;,@deal_order_by);</span><br><span class="line">end if;</span><br><span class="line">end if;</span><br><span class="line">   </span><br><span class="line">set @ssra = concat(@ssra, &apos; limit ?,? &apos;);</span><br><span class="line"></span><br><span class="line">PREPARE sqlquery FROM @ssra;</span><br><span class="line">EXECUTE sqlquery USING @page_index,@size;</span><br><span class="line"></span><br><span class="line">   DROP TEMPORARY TABLE IF EXISTS user_tmp;</span><br><span class="line">end;</span><br><span class="line">END</span><br><span class="line">DELIMITER ;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;sql拼接注意：&quot;&gt;&lt;a href=&quot;#sql拼接注意：&quot; class=&quot;headerlink&quot; title=&quot;sql拼接注意：&quot;&gt;&lt;/a&gt;sql拼接注意：&lt;/h3&gt;&lt;h4 id=&quot;单双引号&quot;&gt;&lt;a href=&quot;#单双引号&quot; class=&quot;headerlink&quot; title=&quot;单双引号&quot;&gt;&lt;/a&gt;单双引号&lt;/h4&gt;&lt;h4 id=&quot;like查询&quot;&gt;&lt;a href=&quot;#like查询&quot; class=&quot;headerlink&quot; title=&quot;like查询&quot;&gt;&lt;/a&gt;like查询&lt;/h4&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/tags/Mysql/"/>
    
      <category term="存储过程" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E5%AD%98%E5%82%A8%E8%BF%87%E7%A8%8B/"/>
    
  </entry>
  
  <entry>
    <title>Chrome 控制台不完全指南</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Chrome-%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%8D%E5%AE%8C%E5%85%A8%E6%8C%87%E5%8D%97/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Chrome-控制台不完全指南/</id>
    <published>2018-03-15T14:44:12.000Z</published>
    <updated>2018-03-16T01:14:29.966Z</updated>
    
    <content type="html"><![CDATA[<p>Chrome的开发者工具已经强大到没朋友的地步了，特别是其功能丰富界面友好的console，使用得当可以有如下功效：</p><p>更高「逼格」更快「开发调试」更强「进阶级的Frontender」<br>Bug无处遁形「Console大法好」<br><a id="more"></a><br>…….</p><p>转载自：<a href="http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html" target="_blank" rel="noopener">http://www.cnblogs.com/Wayou/p/chrome-console-tips-and-tricks.html</a></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;Chrome的开发者工具已经强大到没朋友的地步了，特别是其功能丰富界面友好的console，使用得当可以有如下功效：&lt;/p&gt;
&lt;p&gt;更高「逼格」更快「开发调试」更强「进阶级的Frontender」&lt;br&gt;Bug无处遁形「Console大法好」&lt;br&gt;
    
    </summary>
    
      <category term="Chrome" scheme="https://cq-harry.github.io/Harry.github.io/categories/Chrome/"/>
    
    
      <category term="Chrome" scheme="https://cq-harry.github.io/Harry.github.io/tags/Chrome/"/>
    
      <category term="控制台" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E6%8E%A7%E5%88%B6%E5%8F%B0/"/>
    
  </entry>
  
  <entry>
    <title>IDEA中Spring boot热部署 Thymeleaf警告</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/IDEA%E4%B8%ADSpring-boot%E7%83%AD%E9%83%A8%E7%BD%B2-Thymeleaf%E8%AD%A6%E5%91%8A/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/IDEA中Spring-boot热部署-Thymeleaf警告/</id>
    <published>2018-03-15T14:39:41.000Z</published>
    <updated>2018-03-16T01:14:29.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="解决idea中Thymeleaf页面警告问题"><a href="#解决idea中Thymeleaf页面警告问题" class="headerlink" title="解决idea中Thymeleaf页面警告问题"></a>解决idea中Thymeleaf页面警告问题</h3><h4 id="maven-module-project项目会出现这个问题"><a href="#maven-module-project项目会出现这个问题" class="headerlink" title="maven module project项目会出现这个问题"></a>maven module project项目会出现这个问题</h4><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512118004859_1.png" alt="id"><br><a id="more"></a></p><h4 id="解决方式在idea的官网也给出了答案，请点这个进入官网"><a href="#解决方式在idea的官网也给出了答案，请点这个进入官网" class="headerlink" title="解决方式在idea的官网也给出了答案，请点这个进入官网"></a>解决方式在idea的官网也给出了答案，请点这个<a href="https://www.jetbrains.com/help/idea/2016.3/thymeleaf.html#d397188e121" target="_blank" rel="noopener">进入官网</a></h4><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512118089581_1.jpg" alt="id"></p><h4 id="按照官网的办法，我们进行一下设置，如下图："><a href="#按照官网的办法，我们进行一下设置，如下图：" class="headerlink" title="按照官网的办法，我们进行一下设置，如下图："></a>按照官网的办法，我们进行一下设置，如下图：</h4><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512118132850_1.jpg" alt="id"></p><h3 id="idea-spring-boot热部署问题"><a href="#idea-spring-boot热部署问题" class="headerlink" title="idea spring boot热部署问题"></a>idea spring boot热部署问题</h3><p><strong>如果不重启服务，修改html文件是不生效的，这样我们开发效率会很低啊，所以我们要想办法让web容器像原来那样，可以进行自动刷新生效。</strong></p><h4 id="首先需要在pom-xml文件中引入devtools包"><a href="#首先需要在pom-xml文件中引入devtools包" class="headerlink" title="首先需要在pom.xml文件中引入devtools包"></a>首先需要在pom.xml文件中引入devtools包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;spring-boot-devtools&lt;/artifactId&gt;</span><br><span class="line">    &lt;optional&gt;true&lt;/optional&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><h4 id="对idea进行一些配置"><a href="#对idea进行一些配置" class="headerlink" title="对idea进行一些配置:"></a>对idea进行一些配置:</h4><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512118240583_1.jpg" alt="id"></p><h4 id="设置一下这个快捷键"><a href="#设置一下这个快捷键" class="headerlink" title="设置一下这个快捷键"></a>设置一下这个快捷键</h4><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512118276468_1.jpg" alt="id"></p><h4 id="利用刚刚设置好的快捷键打开-Registry窗口，在蓝色的地方打钩"><a href="#利用刚刚设置好的快捷键打开-Registry窗口，在蓝色的地方打钩" class="headerlink" title="利用刚刚设置好的快捷键打开 Registry窗口，在蓝色的地方打钩"></a>利用刚刚设置好的快捷键打开 Registry窗口，在蓝色的地方打钩</h4><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512118305304_1.jpg" alt="id"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;解决idea中Thymeleaf页面警告问题&quot;&gt;&lt;a href=&quot;#解决idea中Thymeleaf页面警告问题&quot; class=&quot;headerlink&quot; title=&quot;解决idea中Thymeleaf页面警告问题&quot;&gt;&lt;/a&gt;解决idea中Thymeleaf页面警告问题&lt;/h3&gt;&lt;h4 id=&quot;maven-module-project项目会出现这个问题&quot;&gt;&lt;a href=&quot;#maven-module-project项目会出现这个问题&quot; class=&quot;headerlink&quot; title=&quot;maven module project项目会出现这个问题&quot;&gt;&lt;/a&gt;maven module project项目会出现这个问题&lt;/h4&gt;&lt;p&gt;&lt;img src=&quot;http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512118004859_1.png&quot; alt=&quot;id&quot;&gt;&lt;br&gt;
    
    </summary>
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/tags/IDEA/"/>
    
      <category term="Spring Boot" scheme="https://cq-harry.github.io/Harry.github.io/tags/Spring-Boot/"/>
    
      <category term="Thymeleaf" scheme="https://cq-harry.github.io/Harry.github.io/tags/Thymeleaf/"/>
    
  </entry>
  
  <entry>
    <title>Java BigDecimal 小数点处理 计算</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Java-BigDecimal-%E5%B0%8F%E6%95%B0%E7%82%B9%E5%A4%84%E7%90%86-%E8%AE%A1%E7%AE%97/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Java-BigDecimal-小数点处理-计算/</id>
    <published>2018-03-15T14:37:35.000Z</published>
    <updated>2018-03-16T01:14:29.968Z</updated>
    
    <content type="html"><![CDATA[<h4 id="四舍五入"><a href="#四舍五入" class="headerlink" title="四舍五入"></a>四舍五入</h4><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal b1 = <span class="keyword">new</span> BigDecimal(<span class="number">3.1415726</span>);</span><br><span class="line">b1 = b1.setScale(<span class="number">2</span>, BigDecimal.ROUND_HALF_UP);</span><br><span class="line">System.out.println(b1);</span><br><span class="line"><span class="comment">//输出：3.14</span></span><br></pre></td></tr></table></figure><a id="more"></a><h4 id="加法运算"><a href="#加法运算" class="headerlink" title="加法运算"></a>加法运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal b1 = new BigDecimal(3);</span><br><span class="line">BigDecimal b2 = new BigDecimal(2);</span><br><span class="line">System.out.println(b1.add(b2));</span><br><span class="line">//输出：5</span><br></pre></td></tr></table></figure><h4 id="减法运算"><a href="#减法运算" class="headerlink" title="减法运算"></a>减法运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal b1 = new BigDecimal(3);</span><br><span class="line">BigDecimal b2 = new BigDecimal(1);</span><br><span class="line">System.out.println(b1.subtract(b2));</span><br><span class="line">//输出：2</span><br></pre></td></tr></table></figure><h4 id="乘法运算"><a href="#乘法运算" class="headerlink" title="乘法运算"></a>乘法运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">BigDecimal b1 = new BigDecimal(3);</span><br><span class="line">BigDecimal b2 = new BigDecimal(2);</span><br><span class="line">System.out.println(b1.multiply(b2));</span><br><span class="line">// 输出：6</span><br></pre></td></tr></table></figure><h4 id="除法运算"><a href="#除法运算" class="headerlink" title="除法运算"></a>除法运算</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">//当发生除不尽的情况时，精确到小数点以后10位，以后的数字四舍五入</span><br><span class="line">BigDecimal b1 = new BigDecimal(13);</span><br><span class="line">BigDecimal b2 = new BigDecimal(3);</span><br><span class="line">System.out.println(b1.divide(b2, 10, BigDecimal.ROUND_HALF_UP));</span><br><span class="line">// 输出：4.3333333333</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;四舍五入&quot;&gt;&lt;a href=&quot;#四舍五入&quot; class=&quot;headerlink&quot; title=&quot;四舍五入&quot;&gt;&lt;/a&gt;四舍五入&lt;/h4&gt;&lt;figure class=&quot;highlight java&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;BigDecimal b1 = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; BigDecimal(&lt;span class=&quot;number&quot;&gt;3.1415726&lt;/span&gt;);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;b1 = b1.setScale(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;, BigDecimal.ROUND_HALF_UP);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;System.out.println(b1);&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//输出：3.14&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/tags/Java/"/>
    
      <category term="BigDecimal" scheme="https://cq-harry.github.io/Harry.github.io/tags/BigDecimal/"/>
    
  </entry>
  
  <entry>
    <title>maven 常用命令</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/maven-%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/maven-常用命令/</id>
    <published>2018-03-15T10:11:59.000Z</published>
    <updated>2018-03-16T01:14:29.971Z</updated>
    
    <content type="html"><![CDATA[<h3 id="maven官方库："><a href="#maven官方库：" class="headerlink" title="maven官方库："></a>maven官方库：</h3><p><strong><a href="http://repo2.maven.org/maven2/" target="_blank" rel="noopener">http://repo2.maven.org/maven2/</a></strong></p><h3 id="阿里云镜像："><a href="#阿里云镜像：" class="headerlink" title="阿里云镜像："></a>阿里云镜像：</h3><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;mirror&gt;</span><br><span class="line">    &lt;id&gt;alimaven&lt;/id&gt;</span><br><span class="line">    &lt;mirrorOf&gt;central&lt;/mirrorOf&gt;</span><br><span class="line">    &lt;name&gt;aliyun maven&lt;/name&gt;</span><br><span class="line">    &lt;url&gt;http://maven.aliyun.com/nexus/content/repositories/central/&lt;/url&gt;</span><br><span class="line">&lt;/mirror&gt;</span><br></pre></td></tr></table></figure><h3 id="maven依赖查询："><a href="#maven依赖查询：" class="headerlink" title="maven依赖查询："></a>maven依赖查询：</h3><p><a href="http://mvnrepository.com/" target="_blank" rel="noopener">http://mvnrepository.com/</a></p><h3 id="maven常用命令："><a href="#maven常用命令：" class="headerlink" title="maven常用命令："></a>maven常用命令：</h3><h4 id="创建Maven的普通java项目"><a href="#创建Maven的普通java项目" class="headerlink" title="创建Maven的普通java项目"></a>创建Maven的普通java项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create</span><br><span class="line">-DgroupId=packageName</span><br><span class="line">-DartifactId=projectName</span><br></pre></td></tr></table></figure><h4 id="创建Maven的Web项目"><a href="#创建Maven的Web项目" class="headerlink" title="创建Maven的Web项目"></a>创建Maven的Web项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">mvn archetype:create</span><br><span class="line">-DgroupId=packageName</span><br><span class="line">-DartifactId=webappName</span><br><span class="line">-DarchetypeArtifactId=maven-archetype-webapp</span><br></pre></td></tr></table></figure><h4 id="编译源代码"><a href="#编译源代码" class="headerlink" title="编译源代码"></a>编译源代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn compile</span><br></pre></td></tr></table></figure><h4 id="编译测试代码"><a href="#编译测试代码" class="headerlink" title="编译测试代码"></a>编译测试代码</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test -compile</span><br></pre></td></tr></table></figure><h4 id="运行测试"><a href="#运行测试" class="headerlink" title="运行测试"></a>运行测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test</span><br></pre></td></tr></table></figure><h4 id="产生site"><a href="#产生site" class="headerlink" title="产生site"></a>产生site</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn site</span><br></pre></td></tr></table></figure><h4 id="打包"><a href="#打包" class="headerlink" title="打包"></a>打包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn package</span><br></pre></td></tr></table></figure><h4 id="在本地Repository中安装jar"><a href="#在本地Repository中安装jar" class="headerlink" title="在本地Repository中安装jar"></a>在本地Repository中安装jar</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn install</span><br></pre></td></tr></table></figure><h4 id="清除产生的项目"><a href="#清除产生的项目" class="headerlink" title="清除产生的项目"></a>清除产生的项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn clean</span><br></pre></td></tr></table></figure><h4 id="生成eclipse项目"><a href="#生成eclipse项目" class="headerlink" title="生成eclipse项目"></a>生成eclipse项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn eclipse:eclipse</span><br></pre></td></tr></table></figure><h4 id="生成idea项目"><a href="#生成idea项目" class="headerlink" title="生成idea项目"></a>生成idea项目</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn idea:idea</span><br></pre></td></tr></table></figure><h4 id="组合使用goal命令，如只打包不测试"><a href="#组合使用goal命令，如只打包不测试" class="headerlink" title="组合使用goal命令，如只打包不测试"></a>组合使用goal命令，如只打包不测试</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -Dtest package</span><br></pre></td></tr></table></figure><h4 id="编译测试的内容"><a href="#编译测试的内容" class="headerlink" title="编译测试的内容"></a>编译测试的内容</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test -compile</span><br></pre></td></tr></table></figure><h4 id="只打jar包"><a href="#只打jar包" class="headerlink" title="只打jar包"></a>只打jar包</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn jar:jar</span><br></pre></td></tr></table></figure><h4 id="只测试而不编译，也不测试编译"><a href="#只测试而不编译，也不测试编译" class="headerlink" title="只测试而不编译，也不测试编译"></a>只测试而不编译，也不测试编译</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn test -skipping compile -skinpping test -compile</span><br></pre></td></tr></table></figure><p><strong>-skipping的灵活运用，当然也可以用于其他组合命令</strong></p><h4 id="清除eclipse的一些系统设置"><a href="#清除eclipse的一些系统设置" class="headerlink" title="清除eclipse的一些系统设置"></a>清除eclipse的一些系统设置</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn eclipse:clean</span><br></pre></td></tr></table></figure><h4 id="显示版本信息"><a href="#显示版本信息" class="headerlink" title="显示版本信息"></a>显示版本信息</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">mvn -v</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;maven官方库：&quot;&gt;&lt;a href=&quot;#maven官方库：&quot; class=&quot;headerlink&quot; title=&quot;maven官方库：&quot;&gt;&lt;/a&gt;maven官方库：&lt;/h3&gt;&lt;p&gt;&lt;strong&gt;&lt;a href=&quot;http://repo2.maven.org/maven2/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://repo2.maven.org/maven2/&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;
&lt;h3 id=&quot;阿里云镜像：&quot;&gt;&lt;a href=&quot;#阿里云镜像：&quot; class=&quot;headerlink&quot; title=&quot;阿里云镜像：&quot;&gt;&lt;/a&gt;阿里云镜像：&lt;/h3&gt;
    
    </summary>
    
      <category term="Maven" scheme="https://cq-harry.github.io/Harry.github.io/categories/Maven/"/>
    
    
      <category term="maven" scheme="https://cq-harry.github.io/Harry.github.io/tags/maven/"/>
    
      <category term="常用命令" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E5%B8%B8%E7%94%A8%E5%91%BD%E4%BB%A4/"/>
    
  </entry>
  
  <entry>
    <title>IDEA控制台中文乱码解决方案</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/IDEA%E6%8E%A7%E5%88%B6%E5%8F%B0%E4%B8%AD%E6%96%87%E4%B9%B1%E7%A0%81%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/IDEA控制台中文乱码解决方案/</id>
    <published>2018-03-15T10:10:23.000Z</published>
    <updated>2018-03-16T01:14:29.967Z</updated>
    
    <content type="html"><![CDATA[<h4 id="打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加："><a href="#打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加：" class="headerlink" title="打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加："></a>打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure><a id="more"></a><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512117071813_1.png" alt="id"></p><h4 id="配置项目编码以及IDE编码："><a href="#配置项目编码以及IDE编码：" class="headerlink" title="配置项目编码以及IDE编码："></a>配置项目编码以及IDE编码：</h4><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512117128404_1.png" alt="id"></p><h4 id="配置项目启动服务器参数："><a href="#配置项目启动服务器参数：" class="headerlink" title="配置项目启动服务器参数："></a>配置项目启动服务器参数：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">-Dfile.encoding=UTF-8</span><br></pre></td></tr></table></figure><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512117195505_1.png" alt="id"></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加：&quot;&gt;&lt;a href=&quot;#打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加：&quot; class=&quot;headerlink&quot; title=&quot;打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加：&quot;&gt;&lt;/a&gt;打开Intellij的根目录，找到下图的两个文件（根据你的系统是32位或64位选择其中一个配置文件），在配置文件中添加：&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;-Dfile.encoding=UTF-8&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/tags/IDEA/"/>
    
      <category term="乱码" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E4%B9%B1%E7%A0%81/"/>
    
  </entry>
  
  <entry>
    <title>linux(CentOS) 下mysql自动备份</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/linux-CentOS-%E4%B8%8Bmysql%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/linux-CentOS-下mysql自动备份/</id>
    <published>2018-03-15T10:08:36.000Z</published>
    <updated>2018-03-16T01:14:29.971Z</updated>
    
    <content type="html"><![CDATA[<h4 id="创建并编辑文件-data-mysqlBack-bakmysql"><a href="#创建并编辑文件-data-mysqlBack-bakmysql" class="headerlink" title="创建并编辑文件/data/mysqlBack/bakmysql"></a>创建并编辑文件/data/mysqlBack/bakmysql</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">db_user=&quot;root&quot;</span><br><span class="line">db_passwd=&quot;root&quot;</span><br><span class="line">db_name=&quot;db_test&quot;</span><br><span class="line"># the directory for story your backup file.you shall change this dir</span><br><span class="line">backup_dir=&quot;/data/mysqlBack&quot;</span><br><span class="line"># date format for backup file (dd-mm-yyyy)</span><br><span class="line">time=&quot;$(date +&quot;%Y%m%d%H%M%S&quot;)&quot;     </span><br><span class="line"></span><br><span class="line">mysqldump -u$db_user  -p$db_passwd $db_name  &gt; &quot;$backup_dir/$db_name&quot;_&quot;$time.sql&quot;</span><br></pre></td></tr></table></figure><p><strong>注意</strong>：-p和$db_passwd之间没有空格，不然$db_passwd会被当做参数[数据库名]来解析</p><a id="more"></a><h4 id="修改文件backmysql属性，使其可执行"><a href="#修改文件backmysql属性，使其可执行" class="headerlink" title="修改文件backmysql属性，使其可执行"></a>修改文件backmysql属性，使其可执行</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod +x /usr/sbin/bakmysql</span><br></pre></td></tr></table></figure><h4 id="创建定时任务"><a href="#创建定时任务" class="headerlink" title="创建定时任务"></a>创建定时任务</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"></span><br><span class="line"> #进入编辑界面，内容如下</span><br><span class="line"></span><br><span class="line"> 00 22 * * * /data/mysqlBack/backmysq</span><br><span class="line"> #每天22:00执行backmysq文件，备份数据库在路径/data/mysqlBack/下</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;创建并编辑文件-data-mysqlBack-bakmysql&quot;&gt;&lt;a href=&quot;#创建并编辑文件-data-mysqlBack-bakmysql&quot; class=&quot;headerlink&quot; title=&quot;创建并编辑文件/data/mysqlBack/bakmysql&quot;&gt;&lt;/a&gt;创建并编辑文件/data/mysqlBack/bakmysql&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;db_user=&amp;quot;root&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db_passwd=&amp;quot;root&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;db_name=&amp;quot;db_test&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# the directory for story your backup file.you shall change this dir&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;backup_dir=&amp;quot;/data/mysqlBack&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# date format for backup file (dd-mm-yyyy)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;time=&amp;quot;$(date +&amp;quot;%Y%m%d%H%M%S&amp;quot;)&amp;quot;     &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;mysqldump -u$db_user  -p$db_passwd $db_name  &amp;gt; &amp;quot;$backup_dir/$db_name&amp;quot;_&amp;quot;$time.sql&amp;quot;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;strong&gt;注意&lt;/strong&gt;：-p和$db_passwd之间没有空格，不然$db_passwd会被当做参数[数据库名]来解析&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/categories/Mysql/"/>
    
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/tags/Mysql/"/>
    
      <category term="linux" scheme="https://cq-harry.github.io/Harry.github.io/tags/linux/"/>
    
      <category term="CentOS" scheme="https://cq-harry.github.io/Harry.github.io/tags/CentOS/"/>
    
      <category term="自动备份" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E8%87%AA%E5%8A%A8%E5%A4%87%E4%BB%BD/"/>
    
  </entry>
  
  <entry>
    <title>mysql数据库、Java服务端对emoji的支持</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/mysql%E6%95%B0%E6%8D%AE%E5%BA%93%E3%80%81Java%E6%9C%8D%E5%8A%A1%E7%AB%AF%E5%AF%B9emoji%E7%9A%84%E6%94%AF%E6%8C%81/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/mysql数据库、Java服务端对emoji的支持/</id>
    <published>2018-03-15T10:05:58.000Z</published>
    <updated>2018-03-16T01:14:29.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="问题描述："><a href="#问题描述：" class="headerlink" title="问题描述："></a>问题描述：</h3><p>如果UTF8字符集且是Java服务器的话，当存储含有emoji表情时，会抛出类似如下异常：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">java.sql.SQLException: Incorrect string value: &apos;\xF0\x9F\x92\x94&apos; for column &apos;name&apos; at row 1  </span><br><span class="line">    at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1073)  </span><br><span class="line">    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3593)  </span><br><span class="line">    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3525)  </span><br><span class="line">    at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1986)  </span><br><span class="line">    at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2140)  </span><br><span class="line">    at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2620)  </span><br><span class="line">    at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1662)  </span><br><span class="line">    at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1581)</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这就是字符集不支持的异常。因为UTF-8编码有可能是两个、三个、四个字节，其中Emoji表情是4个字节，而Mysql的utf8编码最多3个字节，所以导致了数据插不进去。</p><h3 id="实施步骤："><a href="#实施步骤：" class="headerlink" title="实施步骤："></a>实施步骤：</h3><h4 id="utf8mb4的最低mysql版本支持版本为5-5-3-，若不是，请升级到较新版本。"><a href="#utf8mb4的最低mysql版本支持版本为5-5-3-，若不是，请升级到较新版本。" class="headerlink" title="utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本。"></a>utf8mb4的最低mysql版本支持版本为5.5.3+，若不是，请升级到较新版本。</h4><h4 id="修改database、table和column字符集。参考以下语句："><a href="#修改database、table和column字符集。参考以下语句：" class="headerlink" title="修改database、table和column字符集。参考以下语句："></a>修改database、table和column字符集。参考以下语句：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">ALTER DATABASE database_name CHARACTER SET = utf8mb4 COLLATE = utf8mb4_unicode_ci;</span><br><span class="line">ALTER TABLE table_name CONVERT TO CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br><span class="line">ALTER TABLE user CHANGE nick_name nick_name varchar(50) CHARACTER SET utf8mb4 COLLATE utf8mb4_unicode_ci;</span><br></pre></td></tr></table></figure><h4 id="修改mysql配置文件my-cnf（windows为my-ini）"><a href="#修改mysql配置文件my-cnf（windows为my-ini）" class="headerlink" title="修改mysql配置文件my.cnf（windows为my.ini）"></a>修改mysql配置文件my.cnf（windows为my.ini）</h4><p>my.cnf一般在etc/mysql/my.cnf位置。找到后请在以下三部分里添加如下内容：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line">[mysql]</span><br><span class="line">default-character-set = utf8mb4</span><br><span class="line">[mysqld]</span><br><span class="line">character-set-client-handshake = FALSE</span><br><span class="line">character-set-server = utf8mb4</span><br><span class="line">collation-server = utf8mb4_unicode_ci</span><br><span class="line">init_connect=&apos;SET NAMES utf8mb4&apos;</span><br></pre></td></tr></table></figure></p><h4 id="重启-MySQL-Server、检查字符集"><a href="#重启-MySQL-Server、检查字符集" class="headerlink" title="重启 MySQL Server、检查字符集"></a>重启 MySQL Server、检查字符集</h4><h4 id="如果你用的是java服务器，升级或确保你的mysql-connector版本高于5-1-13，否则仍然无法使用utf8mb4"><a href="#如果你用的是java服务器，升级或确保你的mysql-connector版本高于5-1-13，否则仍然无法使用utf8mb4" class="headerlink" title="如果你用的是java服务器，升级或确保你的mysql connector版本高于5.1.13，否则仍然无法使用utf8mb4"></a>如果你用的是java服务器，升级或确保你的mysql connector版本高于5.1.13，否则仍然无法使用utf8mb4</h4><h4 id="检查你服务端的db配置文件："><a href="#检查你服务端的db配置文件：" class="headerlink" title="检查你服务端的db配置文件："></a>检查你服务端的db配置文件：</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">jdbc.driverClassName=com.mysql.jdbc.Driver</span><br><span class="line">jdbc.url=jdbc:mysql://localhost:3306/database?autoReconnect=true&amp;useUnicode=true&amp;zeroDateTimeBehavior=convertToNull</span><br><span class="line">jdbc.username=root</span><br><span class="line">jdbc.password=password</span><br></pre></td></tr></table></figure><h3 id="特别说明其中的jdbc-url配置："><a href="#特别说明其中的jdbc-url配置：" class="headerlink" title="特别说明其中的jdbc.url配置："></a>特别说明其中的jdbc.url配置：</h3><p>如果你已经升级好了mysql-connector，其中的characterEncoding=utf8可以被自动被识别为utf8mb4（当然也兼容原来的utf8），而autoReconnect配置强烈建议配上，之前就是忽略了这个属性，导致因为缓存缘故，没有读取到DB最新配置，导致一直无法使用utf8mb4字符集！！这里还有一个坑，费了我好长时间。connector版本大于5.1.13的不能加characterEncoding=utf8。**</p><p>来自于：<a href="https://segmentfault.com/a/1190000000616820" target="_blank" rel="noopener">mysql/Java服务端对emoji的支持</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;问题描述：&quot;&gt;&lt;a href=&quot;#问题描述：&quot; class=&quot;headerlink&quot; title=&quot;问题描述：&quot;&gt;&lt;/a&gt;问题描述：&lt;/h3&gt;&lt;p&gt;如果UTF8字符集且是Java服务器的话，当存储含有emoji表情时，会抛出类似如下异常：&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;java.sql.SQLException: Incorrect string value: &amp;apos;\xF0\x9F\x92\x94&amp;apos; for column &amp;apos;name&amp;apos; at row 1  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.SQLError.createSQLException(SQLError.java:1073)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3593)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.MysqlIO.checkErrorPacket(MysqlIO.java:3525)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.MysqlIO.sendCommand(MysqlIO.java:1986)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.MysqlIO.sqlQueryDirect(MysqlIO.java:2140)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.ConnectionImpl.execSQL(ConnectionImpl.java:2620)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1662)  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;    at com.mysql.jdbc.StatementImpl.executeUpdate(StatementImpl.java:1581)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/categories/Mysql/"/>
    
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/tags/Java/"/>
    
      <category term="Mysql" scheme="https://cq-harry.github.io/Harry.github.io/tags/Mysql/"/>
    
      <category term="emoji" scheme="https://cq-harry.github.io/Harry.github.io/tags/emoji/"/>
    
  </entry>
  
  <entry>
    <title>Mybatis Plugin插件介绍及破解</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Mybatis-Plugin%E6%8F%92%E4%BB%B6%E4%BB%8B%E7%BB%8D%E5%8F%8A%E7%A0%B4%E8%A7%A3/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/Mybatis-Plugin插件介绍及破解/</id>
    <published>2018-03-15T10:03:56.000Z</published>
    <updated>2018-03-16T01:14:29.969Z</updated>
    
    <content type="html"><![CDATA[<h1 id="Mybatis-Plugin"><a href="#Mybatis-Plugin" class="headerlink" title="Mybatis Plugin"></a>Mybatis Plugin</h1><a id="more"></a><h2 id="Mybatis-Plugin插件功能介绍"><a href="#Mybatis-Plugin插件功能介绍" class="headerlink" title="Mybatis Plugin插件功能介绍"></a>Mybatis Plugin插件功能介绍</h2><h3 id="提供Mapper接口与配置文件中对应SQL的导航"><a href="#提供Mapper接口与配置文件中对应SQL的导航" class="headerlink" title="提供Mapper接口与配置文件中对应SQL的导航"></a>提供Mapper接口与配置文件中对应SQL的导航</h3><h3 id="编辑XML文件时自动补全"><a href="#编辑XML文件时自动补全" class="headerlink" title="编辑XML文件时自动补全"></a>编辑XML文件时自动补全</h3><h3 id="根据Mapper接口-使用快捷键生成xml文件及SQL标签"><a href="#根据Mapper接口-使用快捷键生成xml文件及SQL标签" class="headerlink" title="根据Mapper接口, 使用快捷键生成xml文件及SQL标签"></a>根据Mapper接口, 使用快捷键生成xml文件及SQL标签</h3><h3 id="ResultMap中的property支持自动补全，支持级联-属性A-属性B-属性C"><a href="#ResultMap中的property支持自动补全，支持级联-属性A-属性B-属性C" class="headerlink" title="ResultMap中的property支持自动补全，支持级联(属性A.属性B.属性C)"></a>ResultMap中的property支持自动补全，支持级联(属性A.属性B.属性C)</h3><h3 id="快捷键生成-Param注解"><a href="#快捷键生成-Param注解" class="headerlink" title="快捷键生成@Param注解"></a>快捷键生成@Param注解</h3><h3 id="XML中编辑SQL时-括号自动补全"><a href="#XML中编辑SQL时-括号自动补全" class="headerlink" title="XML中编辑SQL时, 括号自动补全"></a>XML中编辑SQL时, 括号自动补全</h3><h3 id="XML中编辑SQL时-支持参数自动补全-基于-Param注解识别参数"><a href="#XML中编辑SQL时-支持参数自动补全-基于-Param注解识别参数" class="headerlink" title="XML中编辑SQL时, 支持参数自动补全(基于@Param注解识别参数)"></a>XML中编辑SQL时, 支持参数自动补全(基于@Param注解识别参数)</h3><h3 id="自动检查Mapper-XML文件中ID冲突"><a href="#自动检查Mapper-XML文件中ID冲突" class="headerlink" title="自动检查Mapper XML文件中ID冲突"></a>自动检查Mapper XML文件中ID冲突</h3><h3 id="自动检查Mapper-XML文件中错误的属性值"><a href="#自动检查Mapper-XML文件中错误的属性值" class="headerlink" title="自动检查Mapper XML文件中错误的属性值"></a>自动检查Mapper XML文件中错误的属性值</h3><h3 id="支持Find-Usage"><a href="#支持Find-Usage" class="headerlink" title="支持Find Usage"></a>支持Find Usage</h3><h3 id="支持重构从命名"><a href="#支持重构从命名" class="headerlink" title="支持重构从命名"></a>支持重构从命名</h3><h3 id="支持别名"><a href="#支持别名" class="headerlink" title="支持别名"></a>支持别名</h3><h3 id="自动生成ResultMap属性"><a href="#自动生成ResultMap属性" class="headerlink" title="自动生成ResultMap属性"></a>自动生成ResultMap属性</h3><h3 id="快捷键-Option-Enter-Mac-Alt-Enter-Windows"><a href="#快捷键-Option-Enter-Mac-Alt-Enter-Windows" class="headerlink" title="快捷键: Option + Enter(Mac) | Alt + Enter(Windows)"></a>快捷键: Option + Enter(Mac) | Alt + Enter(Windows)</h3><h2 id="Mybatis-Plugin破解："><a href="#Mybatis-Plugin破解：" class="headerlink" title="Mybatis Plugin破解："></a>Mybatis Plugin破解：</h2><p>破解文件地址：<a href="https://github.com/myoss/profile" target="_blank" rel="noopener">https://github.com/myoss/profile</a></p><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512115876681_1.png" alt="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512115876681_1.png"><br><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512115920699_1.png" alt="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512115920699_1.png"></p><p><strong>具体破解方法请参考上图中红色文件</strong></p>]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;Mybatis-Plugin&quot;&gt;&lt;a href=&quot;#Mybatis-Plugin&quot; class=&quot;headerlink&quot; title=&quot;Mybatis Plugin&quot;&gt;&lt;/a&gt;Mybatis Plugin&lt;/h1&gt;
    
    </summary>
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/tags/IDEA/"/>
    
      <category term="Mybatis Plugin" scheme="https://cq-harry.github.io/Harry.github.io/tags/Mybatis-Plugin/"/>
    
      <category term="破解" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E7%A0%B4%E8%A7%A3/"/>
    
  </entry>
  
  <entry>
    <title>将二维码合并到背景图片中，并添加某些文字</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/%E5%B0%86%E4%BA%8C%E7%BB%B4%E7%A0%81%E5%90%88%E5%B9%B6%E5%88%B0%E8%83%8C%E6%99%AF%E5%9B%BE%E7%89%87%E4%B8%AD%EF%BC%8C%E5%B9%B6%E6%B7%BB%E5%8A%A0%E6%9F%90%E4%BA%9B%E6%96%87%E5%AD%97/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/将二维码合并到背景图片中，并添加某些文字/</id>
    <published>2018-03-15T10:00:47.000Z</published>
    <updated>2018-03-15T10:03:27.165Z</updated>
    
    <content type="html"><![CDATA[<p>将二维码合并到背景图片中，并添加某些文字</p><a id="more"></a><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></td><td class="code"><pre><span class="line">package com.bigcq.hmh.util;</span><br><span class="line"></span><br><span class="line">import javax.imageio.ImageIO;</span><br><span class="line">import java.awt.*;</span><br><span class="line">import java.awt.image.BufferedImage;</span><br><span class="line">import java.io.*;</span><br><span class="line"></span><br><span class="line">/**</span><br><span class="line"> * @author Harry</span><br><span class="line"> * @date 2017/10/15 16:18</span><br><span class="line"> */</span><br><span class="line">public class ImageUtil &#123;</span><br><span class="line"></span><br><span class="line">    /**</span><br><span class="line">     * 图片合并</span><br><span class="line">     *</span><br><span class="line">     * @param image      元素图片 BufferedImage image = ImageIO.read(new FileInputStream(&quot;E:\\erweima.png&quot;));</span><br><span class="line">     * @param bg         背景图片 BufferedImage bg = ImageIO.read(new FileInputStream(&quot;E:\\bg.jpg&quot;));</span><br><span class="line">     * @param width      合成后的元素宽度</span><br><span class="line">     * @param height     合成后的元素高度</span><br><span class="line">     * @param startX     在背景图片的X轴位置</span><br><span class="line">     * @param startY     在背景图片的Y轴位置</span><br><span class="line">     * @param picType    输出合成的图片格式</span><br><span class="line">     * @param path       输出合成图片的地址 E:/jieguo.png</span><br><span class="line">     * @param word       文字内容</span><br><span class="line">     * @param wordSize   文字大小</span><br><span class="line">     * @param wordStartX 文字在背景图片的X轴位置</span><br><span class="line">     * @param wordStartY 文字在背景图片的Y轴位置</span><br><span class="line">     * @return void</span><br><span class="line">     * @author Harry</span><br><span class="line">     * @Date 2017/10/15 17:51</span><br><span class="line">     */</span><br><span class="line">    public static void add(BufferedImage image, BufferedImage bg, int width, int height, int startX, int startY, String picType, String path, String word, int wordSize, int wordStartX, int wordStartY) &#123;</span><br><span class="line">        try &#123;</span><br><span class="line">            Graphics2D g = bg.createGraphics();</span><br><span class="line"></span><br><span class="line">            g.drawImage(image, startX, startY, width, height, null);</span><br><span class="line"></span><br><span class="line">            if (StringUtil.isNotBlank(word)) &#123;</span><br><span class="line">                Font font = new Font(&quot;微软雅黑&quot;, Font.PLAIN, wordSize);</span><br><span class="line">                g.setFont(font);</span><br><span class="line">                g.drawString(word, wordStartX, wordStartY);</span><br><span class="line">            &#125;</span><br><span class="line"></span><br><span class="line">            g.dispose();</span><br><span class="line">            bg.flush();</span><br><span class="line">            image.flush();</span><br><span class="line">            ImageIO.write(bg, picType, new File(path));</span><br><span class="line">        &#125; catch (IOException e) &#123;</span><br><span class="line">            e.printStackTrace();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public static void main(String[] args) throws Exception &#123;</span><br><span class="line">        BufferedImage image = ImageIO.read(new FileInputStream(&quot;E:\\erweima.png&quot;));</span><br><span class="line">        BufferedImage bg = ImageIO.read(new FileInputStream(&quot;E:\\bg.jpg&quot;));//</span><br><span class="line"></span><br><span class="line">        add(image, bg, 190, 190, 210, 542, &quot;png&quot;, &quot;E:/jieguo.png&quot;, &quot;测试文字&quot;, 21, 120, 69);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;将二维码合并到背景图片中，并添加某些文字&lt;/p&gt;
    
    </summary>
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/categories/Java/"/>
    
    
      <category term="Java" scheme="https://cq-harry.github.io/Harry.github.io/tags/Java/"/>
    
      <category term="二维码" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E4%BA%8C%E7%BB%B4%E7%A0%81/"/>
    
      <category term="合并" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E5%90%88%E5%B9%B6/"/>
    
  </entry>
  
  <entry>
    <title>IDEA 常用插件收集</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/IDEA-%E5%B8%B8%E7%94%A8%E6%8F%92%E4%BB%B6%E6%94%B6%E9%9B%86/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/IDEA-常用插件收集/</id>
    <published>2018-03-15T09:35:14.000Z</published>
    <updated>2018-03-16T01:14:29.967Z</updated>
    
    <content type="html"><![CDATA[<h3 id="Eclipse-Code-Formatter："><a href="#Eclipse-Code-Formatter：" class="headerlink" title="Eclipse Code Formatter："></a>Eclipse Code Formatter：</h3><p>从Eclipse换到IntelliJ IDEA后需要再重新设置代码模板，这里的话直接设置一个Eclipse Code Formatter插件，从Eclispe导出一份模板文件就可以使代码模板一致。</p><h3 id="ignore："><a href="#ignore：" class="headerlink" title=".ignore："></a>.ignore：</h3><p>git忽略不必要提交的文件</p><a id="more"></a><h3 id="Mybatis-plugin："><a href="#Mybatis-plugin：" class="headerlink" title="Mybatis plugin："></a>Mybatis plugin：</h3><p><a href="https://cq-harry.github.io/Harry.github.io/2018/03/15/Mybatis-Plugin插件介绍及破解">详情请点击查看</a></p><h3 id="Jrebel-for-IntelliJ："><a href="#Jrebel-for-IntelliJ：" class="headerlink" title="Jrebel for IntelliJ："></a>Jrebel for IntelliJ：</h3><p>IDEA热部署插件：在 Java Web 开发中， 一般更新了 Java 文件后要手动重启 Tomcat 服务器， 才能生效， 浪费不少生命啊， 自从有了 JRebel 这神器的出现， 不论是更新 class 类还是更新 Spring 配置文件都能做到立马生效，大大提高开发效率。</p><h3 id="Alibaba-Java-Coding-Guidelines："><a href="#Alibaba-Java-Coding-Guidelines：" class="headerlink" title="Alibaba Java Coding Guidelines："></a>Alibaba Java Coding Guidelines：</h3><p>阿里巴巴Java开发规约扫描插件</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;Eclipse-Code-Formatter：&quot;&gt;&lt;a href=&quot;#Eclipse-Code-Formatter：&quot; class=&quot;headerlink&quot; title=&quot;Eclipse Code Formatter：&quot;&gt;&lt;/a&gt;Eclipse Code Formatter：&lt;/h3&gt;&lt;p&gt;从Eclipse换到IntelliJ IDEA后需要再重新设置代码模板，这里的话直接设置一个Eclipse Code Formatter插件，从Eclispe导出一份模板文件就可以使代码模板一致。&lt;/p&gt;
&lt;h3 id=&quot;ignore：&quot;&gt;&lt;a href=&quot;#ignore：&quot; class=&quot;headerlink&quot; title=&quot;.ignore：&quot;&gt;&lt;/a&gt;.ignore：&lt;/h3&gt;&lt;p&gt;git忽略不必要提交的文件&lt;/p&gt;
    
    </summary>
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/categories/IDEA/"/>
    
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/tags/IDEA/"/>
    
      <category term="插件" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E6%8F%92%E4%BB%B6/"/>
    
  </entry>
  
  <entry>
    <title>win10 安装 mysql-5.7.19-winx64</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/15/win10-%E5%AE%89%E8%A3%85-mysql-5-7-19-winx64/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/15/win10-安装-mysql-5-7-19-winx64/</id>
    <published>2018-03-15T09:29:22.000Z</published>
    <updated>2018-03-16T01:14:29.972Z</updated>
    
    <content type="html"><![CDATA[<h3 id="下载地址："><a href="#下载地址：" class="headerlink" title="下载地址："></a>下载地址：</h3><p><a href="https://dev.mysql.com/downloads/mysql/" target="_blank" rel="noopener">https://dev.mysql.com/downloads/mysql/</a></p><h3 id="下载："><a href="#下载：" class="headerlink" title="下载："></a>下载：</h3><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512113967774_1.png" alt="Alt text"></p><a id="more"></a><h3 id="解压到指定的路径"><a href="#解压到指定的路径" class="headerlink" title="解压到指定的路径"></a>解压到指定的路径</h3><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512114126430_1.png" alt="id"></p><p>上图红框中的<strong>my.ini</strong>以及<strong>data</strong>文件夹需要自己添加<br><strong>my.ini</strong>内容如下：<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line">[client]</span><br><span class="line">port=3306</span><br><span class="line">default-character-set=utf8</span><br><span class="line"></span><br><span class="line">[mysqld]</span><br><span class="line"># 设置为自己MYSQL的安装目录 </span><br><span class="line">basedir=E:\Program Files (x86)\MySQL\mysql-5.7.19-winx64</span><br><span class="line"># 设置为MYSQL的数据目录</span><br><span class="line">datadir=E:\Program Files (x86)\MySQL\mysql-5.7.19-winx64\data</span><br><span class="line">port=3306</span><br><span class="line">character_set_server=utf8</span><br><span class="line">sql_mode=NO_ENGINE_SUBSTITUTION,NO_AUTO_CREATE_USER</span><br><span class="line">#开启查询缓存</span><br><span class="line">explicit_defaults_for_timestamp=true</span><br><span class="line">skip-grant-tables</span><br></pre></td></tr></table></figure></p><h3 id="设置环境变量"><a href="#设置环境变量" class="headerlink" title="设置环境变量"></a>设置环境变量</h3><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512114228199_1.png" alt="id"></p><h3 id="开始安装"><a href="#开始安装" class="headerlink" title="开始安装:"></a>开始安装:</h3><p>用<strong>管理员</strong>身份打开cmd，并进入mysql安装目录下的bin<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">#初始化data目录下的相关文件</span><br><span class="line">mysqld –initialize-insecure</span><br><span class="line"></span><br><span class="line">#安装</span><br><span class="line">mysqld install</span><br><span class="line"></span><br><span class="line">#启动</span><br><span class="line">net start mysql</span><br><span class="line"></span><br><span class="line">#修改密码</span><br><span class="line">set password for root@localhost = password(‘newPassword’);</span><br><span class="line"></span><br><span class="line">#登录</span><br><span class="line">mysql -u root -p</span><br></pre></td></tr></table></figure></p><h3 id="完工"><a href="#完工" class="headerlink" title="完工"></a>完工</h3><p><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512114302800_1.png" alt="id"><br><img src="http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512114335965_1.png" alt="id"></p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;下载地址：&quot;&gt;&lt;a href=&quot;#下载地址：&quot; class=&quot;headerlink&quot; title=&quot;下载地址：&quot;&gt;&lt;/a&gt;下载地址：&lt;/h3&gt;&lt;p&gt;&lt;a href=&quot;https://dev.mysql.com/downloads/mysql/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;https://dev.mysql.com/downloads/mysql/&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;下载：&quot;&gt;&lt;a href=&quot;#下载：&quot; class=&quot;headerlink&quot; title=&quot;下载：&quot;&gt;&lt;/a&gt;下载：&lt;/h3&gt;&lt;p&gt;&lt;img src=&quot;http://cqhui.oss-cn-shenzhen.aliyuncs.com/1512113967774_1.png&quot; alt=&quot;Alt text&quot;&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="win10" scheme="https://cq-harry.github.io/Harry.github.io/categories/win10/"/>
    
      <category term="mysql" scheme="https://cq-harry.github.io/Harry.github.io/categories/win10/mysql/"/>
    
    
      <category term="win10" scheme="https://cq-harry.github.io/Harry.github.io/tags/win10/"/>
    
      <category term="mysql" scheme="https://cq-harry.github.io/Harry.github.io/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>Eclipse IDEA 码云 插件 gitee</title>
    <link href="https://cq-harry.github.io/Harry.github.io/2018/03/14/Eclipse-IDEA-%E7%A0%81%E4%BA%91-%E6%8F%92%E4%BB%B6-OSCGit/"/>
    <id>https://cq-harry.github.io/Harry.github.io/2018/03/14/Eclipse-IDEA-码云-插件-OSCGit/</id>
    <published>2018-03-14T10:04:02.000Z</published>
    <updated>2018-03-16T01:14:29.966Z</updated>
    
    <content type="html"><![CDATA[<ul><li><p>Eclipse<br> location:<a href="http://droidqw.oschina.io/update-site/4.5/" target="_blank" rel="noopener">http://droidqw.oschina.io/update-site/4.5/</a></p></li><li><p>IDEA<br> 插件库搜索：<strong>gitee</strong></p></li></ul>]]></content>
    
    <summary type="html">
    
      
      
        &lt;ul&gt;
&lt;li&gt;&lt;p&gt;Eclipse&lt;br&gt; location:&lt;a href=&quot;http://droidqw.oschina.io/update-site/4.5/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;http://droidqw.oschina.
      
    
    </summary>
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/categories/IDEA/"/>
    
      <category term="Eclipse" scheme="https://cq-harry.github.io/Harry.github.io/categories/IDEA/Eclipse/"/>
    
    
      <category term="Eclipse" scheme="https://cq-harry.github.io/Harry.github.io/tags/Eclipse/"/>
    
      <category term="IDEA" scheme="https://cq-harry.github.io/Harry.github.io/tags/IDEA/"/>
    
      <category term="码云" scheme="https://cq-harry.github.io/Harry.github.io/tags/%E7%A0%81%E4%BA%91/"/>
    
  </entry>
  
</feed>
